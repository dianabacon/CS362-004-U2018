Running unit tests:
unittest1.c:
TESTING updateCoins():
Test player 0 with 0 treasure card(s) and 0 bonus.
G.coins = 0, expected = 0 PASS
G.coins = 0, expected = 0 PASS
G.coins = 0, expected = 0 PASS
Test player 0 with 0 treasure card(s) and 1 bonus.
G.coins = 1, expected = 1 PASS
G.coins = 1, expected = 1 PASS
G.coins = 1, expected = 1 PASS
Test player 0 with 0 treasure card(s) and 2 bonus.
G.coins = 2, expected = 2 PASS
G.coins = 2, expected = 2 PASS
G.coins = 2, expected = 2 PASS
Test player 0 with 0 treasure card(s) and 3 bonus.
G.coins = 3, expected = 3 PASS
G.coins = 3, expected = 3 PASS
G.coins = 3, expected = 3 PASS
Test player 0 with 0 treasure card(s) and 4 bonus.
G.coins = 4, expected = 4 PASS
G.coins = 4, expected = 4 PASS
G.coins = 4, expected = 4 PASS
Test player 0 with 0 treasure card(s) and 5 bonus.
G.coins = 5, expected = 5 PASS
G.coins = 5, expected = 5 PASS
G.coins = 5, expected = 5 PASS
Test player 0 with 0 treasure card(s) and 6 bonus.
G.coins = 6, expected = 6 PASS
G.coins = 6, expected = 6 PASS
G.coins = 6, expected = 6 PASS
Test player 0 with 0 treasure card(s) and 7 bonus.
G.coins = 7, expected = 7 PASS
G.coins = 7, expected = 7 PASS
G.coins = 7, expected = 7 PASS
Test player 0 with 0 treasure card(s) and 8 bonus.
G.coins = 8, expected = 8 PASS
G.coins = 8, expected = 8 PASS
G.coins = 8, expected = 8 PASS
Test player 0 with 0 treasure card(s) and 9 bonus.
G.coins = 9, expected = 9 PASS
G.coins = 9, expected = 9 PASS
G.coins = 9, expected = 9 PASS
Test player 0 with 0 treasure card(s) and 10 bonus.
G.coins = 10, expected = 10 PASS
G.coins = 10, expected = 10 PASS
G.coins = 10, expected = 10 PASS
Test player 0 with 1 treasure card(s) and 0 bonus.
G.coins = 1, expected = 1 PASS
G.coins = 2, expected = 2 PASS
G.coins = 3, expected = 3 PASS
Test player 0 with 1 treasure card(s) and 1 bonus.
G.coins = 2, expected = 2 PASS
G.coins = 3, expected = 3 PASS
G.coins = 4, expected = 4 PASS
Test player 0 with 1 treasure card(s) and 2 bonus.
G.coins = 3, expected = 3 PASS
G.coins = 4, expected = 4 PASS
G.coins = 5, expected = 5 PASS
Test player 0 with 1 treasure card(s) and 3 bonus.
G.coins = 4, expected = 4 PASS
G.coins = 5, expected = 5 PASS
G.coins = 6, expected = 6 PASS
Test player 0 with 1 treasure card(s) and 4 bonus.
G.coins = 5, expected = 5 PASS
G.coins = 6, expected = 6 PASS
G.coins = 7, expected = 7 PASS
Test player 0 with 1 treasure card(s) and 5 bonus.
G.coins = 6, expected = 6 PASS
G.coins = 7, expected = 7 PASS
G.coins = 8, expected = 8 PASS
Test player 0 with 1 treasure card(s) and 6 bonus.
G.coins = 7, expected = 7 PASS
G.coins = 8, expected = 8 PASS
G.coins = 9, expected = 9 PASS
Test player 0 with 1 treasure card(s) and 7 bonus.
G.coins = 8, expected = 8 PASS
G.coins = 9, expected = 9 PASS
G.coins = 10, expected = 10 PASS
Test player 0 with 1 treasure card(s) and 8 bonus.
G.coins = 9, expected = 9 PASS
G.coins = 10, expected = 10 PASS
G.coins = 11, expected = 11 PASS
Test player 0 with 1 treasure card(s) and 9 bonus.
G.coins = 10, expected = 10 PASS
G.coins = 11, expected = 11 PASS
G.coins = 12, expected = 12 PASS
Test player 0 with 1 treasure card(s) and 10 bonus.
G.coins = 11, expected = 11 PASS
G.coins = 12, expected = 12 PASS
G.coins = 13, expected = 13 PASS
Test player 0 with 2 treasure card(s) and 0 bonus.
G.coins = 2, expected = 2 PASS
G.coins = 4, expected = 4 PASS
G.coins = 6, expected = 6 PASS
Test player 0 with 2 treasure card(s) and 1 bonus.
G.coins = 3, expected = 3 PASS
G.coins = 5, expected = 5 PASS
G.coins = 7, expected = 7 PASS
Test player 0 with 2 treasure card(s) and 2 bonus.
G.coins = 4, expected = 4 PASS
G.coins = 6, expected = 6 PASS
G.coins = 8, expected = 8 PASS
Test player 0 with 2 treasure card(s) and 3 bonus.
G.coins = 5, expected = 5 PASS
G.coins = 7, expected = 7 PASS
G.coins = 9, expected = 9 PASS
Test player 0 with 2 treasure card(s) and 4 bonus.
G.coins = 6, expected = 6 PASS
G.coins = 8, expected = 8 PASS
G.coins = 10, expected = 10 PASS
Test player 0 with 2 treasure card(s) and 5 bonus.
G.coins = 7, expected = 7 PASS
G.coins = 9, expected = 9 PASS
G.coins = 11, expected = 11 PASS
Test player 0 with 2 treasure card(s) and 6 bonus.
G.coins = 8, expected = 8 PASS
G.coins = 10, expected = 10 PASS
G.coins = 12, expected = 12 PASS
Test player 0 with 2 treasure card(s) and 7 bonus.
G.coins = 9, expected = 9 PASS
G.coins = 11, expected = 11 PASS
G.coins = 13, expected = 13 PASS
Test player 0 with 2 treasure card(s) and 8 bonus.
G.coins = 10, expected = 10 PASS
G.coins = 12, expected = 12 PASS
G.coins = 14, expected = 14 PASS
Test player 0 with 2 treasure card(s) and 9 bonus.
G.coins = 11, expected = 11 PASS
G.coins = 13, expected = 13 PASS
G.coins = 15, expected = 15 PASS
Test player 0 with 2 treasure card(s) and 10 bonus.
G.coins = 12, expected = 12 PASS
G.coins = 14, expected = 14 PASS
G.coins = 16, expected = 16 PASS
Test player 0 with 3 treasure card(s) and 0 bonus.
G.coins = 3, expected = 3 PASS
G.coins = 6, expected = 6 PASS
G.coins = 9, expected = 9 PASS
Test player 0 with 3 treasure card(s) and 1 bonus.
G.coins = 4, expected = 4 PASS
G.coins = 7, expected = 7 PASS
G.coins = 10, expected = 10 PASS
Test player 0 with 3 treasure card(s) and 2 bonus.
G.coins = 5, expected = 5 PASS
G.coins = 8, expected = 8 PASS
G.coins = 11, expected = 11 PASS
Test player 0 with 3 treasure card(s) and 3 bonus.
G.coins = 6, expected = 6 PASS
G.coins = 9, expected = 9 PASS
G.coins = 12, expected = 12 PASS
Test player 0 with 3 treasure card(s) and 4 bonus.
G.coins = 7, expected = 7 PASS
G.coins = 10, expected = 10 PASS
G.coins = 13, expected = 13 PASS
Test player 0 with 3 treasure card(s) and 5 bonus.
G.coins = 8, expected = 8 PASS
G.coins = 11, expected = 11 PASS
G.coins = 14, expected = 14 PASS
Test player 0 with 3 treasure card(s) and 6 bonus.
G.coins = 9, expected = 9 PASS
G.coins = 12, expected = 12 PASS
G.coins = 15, expected = 15 PASS
Test player 0 with 3 treasure card(s) and 7 bonus.
G.coins = 10, expected = 10 PASS
G.coins = 13, expected = 13 PASS
G.coins = 16, expected = 16 PASS
Test player 0 with 3 treasure card(s) and 8 bonus.
G.coins = 11, expected = 11 PASS
G.coins = 14, expected = 14 PASS
G.coins = 17, expected = 17 PASS
Test player 0 with 3 treasure card(s) and 9 bonus.
G.coins = 12, expected = 12 PASS
G.coins = 15, expected = 15 PASS
G.coins = 18, expected = 18 PASS
Test player 0 with 3 treasure card(s) and 10 bonus.
G.coins = 13, expected = 13 PASS
G.coins = 16, expected = 16 PASS
G.coins = 19, expected = 19 PASS
Test player 0 with 4 treasure card(s) and 0 bonus.
G.coins = 4, expected = 4 PASS
G.coins = 8, expected = 8 PASS
G.coins = 12, expected = 12 PASS
Test player 0 with 4 treasure card(s) and 1 bonus.
G.coins = 5, expected = 5 PASS
G.coins = 9, expected = 9 PASS
G.coins = 13, expected = 13 PASS
Test player 0 with 4 treasure card(s) and 2 bonus.
G.coins = 6, expected = 6 PASS
G.coins = 10, expected = 10 PASS
G.coins = 14, expected = 14 PASS
Test player 0 with 4 treasure card(s) and 3 bonus.
G.coins = 7, expected = 7 PASS
G.coins = 11, expected = 11 PASS
G.coins = 15, expected = 15 PASS
Test player 0 with 4 treasure card(s) and 4 bonus.
G.coins = 8, expected = 8 PASS
G.coins = 12, expected = 12 PASS
G.coins = 16, expected = 16 PASS
Test player 0 with 4 treasure card(s) and 5 bonus.
G.coins = 9, expected = 9 PASS
G.coins = 13, expected = 13 PASS
G.coins = 17, expected = 17 PASS
Test player 0 with 4 treasure card(s) and 6 bonus.
G.coins = 10, expected = 10 PASS
G.coins = 14, expected = 14 PASS
G.coins = 18, expected = 18 PASS
Test player 0 with 4 treasure card(s) and 7 bonus.
G.coins = 11, expected = 11 PASS
G.coins = 15, expected = 15 PASS
G.coins = 19, expected = 19 PASS
Test player 0 with 4 treasure card(s) and 8 bonus.
G.coins = 12, expected = 12 PASS
G.coins = 16, expected = 16 PASS
G.coins = 20, expected = 20 PASS
Test player 0 with 4 treasure card(s) and 9 bonus.
G.coins = 13, expected = 13 PASS
G.coins = 17, expected = 17 PASS
G.coins = 21, expected = 21 PASS
Test player 0 with 4 treasure card(s) and 10 bonus.
G.coins = 14, expected = 14 PASS
G.coins = 18, expected = 18 PASS
G.coins = 22, expected = 22 PASS
Test player 0 with 5 treasure card(s) and 0 bonus.
G.coins = 5, expected = 5 PASS
G.coins = 10, expected = 10 PASS
G.coins = 15, expected = 15 PASS
Test player 0 with 5 treasure card(s) and 1 bonus.
G.coins = 6, expected = 6 PASS
G.coins = 11, expected = 11 PASS
G.coins = 16, expected = 16 PASS
Test player 0 with 5 treasure card(s) and 2 bonus.
G.coins = 7, expected = 7 PASS
G.coins = 12, expected = 12 PASS
G.coins = 17, expected = 17 PASS
Test player 0 with 5 treasure card(s) and 3 bonus.
G.coins = 8, expected = 8 PASS
G.coins = 13, expected = 13 PASS
G.coins = 18, expected = 18 PASS
Test player 0 with 5 treasure card(s) and 4 bonus.
G.coins = 9, expected = 9 PASS
G.coins = 14, expected = 14 PASS
G.coins = 19, expected = 19 PASS
Test player 0 with 5 treasure card(s) and 5 bonus.
G.coins = 10, expected = 10 PASS
G.coins = 15, expected = 15 PASS
G.coins = 20, expected = 20 PASS
Test player 0 with 5 treasure card(s) and 6 bonus.
G.coins = 11, expected = 11 PASS
G.coins = 16, expected = 16 PASS
G.coins = 21, expected = 21 PASS
Test player 0 with 5 treasure card(s) and 7 bonus.
G.coins = 12, expected = 12 PASS
G.coins = 17, expected = 17 PASS
G.coins = 22, expected = 22 PASS
Test player 0 with 5 treasure card(s) and 8 bonus.
G.coins = 13, expected = 13 PASS
G.coins = 18, expected = 18 PASS
G.coins = 23, expected = 23 PASS
Test player 0 with 5 treasure card(s) and 9 bonus.
G.coins = 14, expected = 14 PASS
G.coins = 19, expected = 19 PASS
G.coins = 24, expected = 24 PASS
Test player 0 with 5 treasure card(s) and 10 bonus.
G.coins = 15, expected = 15 PASS
G.coins = 20, expected = 20 PASS
G.coins = 25, expected = 25 PASS
Test player 1 with 0 treasure card(s) and 0 bonus.
G.coins = 0, expected = 0 PASS
G.coins = 0, expected = 0 PASS
G.coins = 0, expected = 0 PASS
Test player 1 with 0 treasure card(s) and 1 bonus.
G.coins = 1, expected = 1 PASS
G.coins = 1, expected = 1 PASS
G.coins = 1, expected = 1 PASS
Test player 1 with 0 treasure card(s) and 2 bonus.
G.coins = 2, expected = 2 PASS
G.coins = 2, expected = 2 PASS
G.coins = 2, expected = 2 PASS
Test player 1 with 0 treasure card(s) and 3 bonus.
G.coins = 3, expected = 3 PASS
G.coins = 3, expected = 3 PASS
G.coins = 3, expected = 3 PASS
Test player 1 with 0 treasure card(s) and 4 bonus.
G.coins = 4, expected = 4 PASS
G.coins = 4, expected = 4 PASS
G.coins = 4, expected = 4 PASS
Test player 1 with 0 treasure card(s) and 5 bonus.
G.coins = 5, expected = 5 PASS
G.coins = 5, expected = 5 PASS
G.coins = 5, expected = 5 PASS
Test player 1 with 0 treasure card(s) and 6 bonus.
G.coins = 6, expected = 6 PASS
G.coins = 6, expected = 6 PASS
G.coins = 6, expected = 6 PASS
Test player 1 with 0 treasure card(s) and 7 bonus.
G.coins = 7, expected = 7 PASS
G.coins = 7, expected = 7 PASS
G.coins = 7, expected = 7 PASS
Test player 1 with 0 treasure card(s) and 8 bonus.
G.coins = 8, expected = 8 PASS
G.coins = 8, expected = 8 PASS
G.coins = 8, expected = 8 PASS
Test player 1 with 0 treasure card(s) and 9 bonus.
G.coins = 9, expected = 9 PASS
G.coins = 9, expected = 9 PASS
G.coins = 9, expected = 9 PASS
Test player 1 with 0 treasure card(s) and 10 bonus.
G.coins = 10, expected = 10 PASS
G.coins = 10, expected = 10 PASS
G.coins = 10, expected = 10 PASS
Test player 1 with 1 treasure card(s) and 0 bonus.
G.coins = 1, expected = 1 PASS
G.coins = 2, expected = 2 PASS
G.coins = 3, expected = 3 PASS
Test player 1 with 1 treasure card(s) and 1 bonus.
G.coins = 2, expected = 2 PASS
G.coins = 3, expected = 3 PASS
G.coins = 4, expected = 4 PASS
Test player 1 with 1 treasure card(s) and 2 bonus.
G.coins = 3, expected = 3 PASS
G.coins = 4, expected = 4 PASS
G.coins = 5, expected = 5 PASS
Test player 1 with 1 treasure card(s) and 3 bonus.
G.coins = 4, expected = 4 PASS
G.coins = 5, expected = 5 PASS
G.coins = 6, expected = 6 PASS
Test player 1 with 1 treasure card(s) and 4 bonus.
G.coins = 5, expected = 5 PASS
G.coins = 6, expected = 6 PASS
G.coins = 7, expected = 7 PASS
Test player 1 with 1 treasure card(s) and 5 bonus.
G.coins = 6, expected = 6 PASS
G.coins = 7, expected = 7 PASS
G.coins = 8, expected = 8 PASS
Test player 1 with 1 treasure card(s) and 6 bonus.
G.coins = 7, expected = 7 PASS
G.coins = 8, expected = 8 PASS
G.coins = 9, expected = 9 PASS
Test player 1 with 1 treasure card(s) and 7 bonus.
G.coins = 8, expected = 8 PASS
G.coins = 9, expected = 9 PASS
G.coins = 10, expected = 10 PASS
Test player 1 with 1 treasure card(s) and 8 bonus.
G.coins = 9, expected = 9 PASS
G.coins = 10, expected = 10 PASS
G.coins = 11, expected = 11 PASS
Test player 1 with 1 treasure card(s) and 9 bonus.
G.coins = 10, expected = 10 PASS
G.coins = 11, expected = 11 PASS
G.coins = 12, expected = 12 PASS
Test player 1 with 1 treasure card(s) and 10 bonus.
G.coins = 11, expected = 11 PASS
G.coins = 12, expected = 12 PASS
G.coins = 13, expected = 13 PASS
Test player 1 with 2 treasure card(s) and 0 bonus.
G.coins = 2, expected = 2 PASS
G.coins = 4, expected = 4 PASS
G.coins = 6, expected = 6 PASS
Test player 1 with 2 treasure card(s) and 1 bonus.
G.coins = 3, expected = 3 PASS
G.coins = 5, expected = 5 PASS
G.coins = 7, expected = 7 PASS
Test player 1 with 2 treasure card(s) and 2 bonus.
G.coins = 4, expected = 4 PASS
G.coins = 6, expected = 6 PASS
G.coins = 8, expected = 8 PASS
Test player 1 with 2 treasure card(s) and 3 bonus.
G.coins = 5, expected = 5 PASS
G.coins = 7, expected = 7 PASS
G.coins = 9, expected = 9 PASS
Test player 1 with 2 treasure card(s) and 4 bonus.
G.coins = 6, expected = 6 PASS
G.coins = 8, expected = 8 PASS
G.coins = 10, expected = 10 PASS
Test player 1 with 2 treasure card(s) and 5 bonus.
G.coins = 7, expected = 7 PASS
G.coins = 9, expected = 9 PASS
G.coins = 11, expected = 11 PASS
Test player 1 with 2 treasure card(s) and 6 bonus.
G.coins = 8, expected = 8 PASS
G.coins = 10, expected = 10 PASS
G.coins = 12, expected = 12 PASS
Test player 1 with 2 treasure card(s) and 7 bonus.
G.coins = 9, expected = 9 PASS
G.coins = 11, expected = 11 PASS
G.coins = 13, expected = 13 PASS
Test player 1 with 2 treasure card(s) and 8 bonus.
G.coins = 10, expected = 10 PASS
G.coins = 12, expected = 12 PASS
G.coins = 14, expected = 14 PASS
Test player 1 with 2 treasure card(s) and 9 bonus.
G.coins = 11, expected = 11 PASS
G.coins = 13, expected = 13 PASS
G.coins = 15, expected = 15 PASS
Test player 1 with 2 treasure card(s) and 10 bonus.
G.coins = 12, expected = 12 PASS
G.coins = 14, expected = 14 PASS
G.coins = 16, expected = 16 PASS
Test player 1 with 3 treasure card(s) and 0 bonus.
G.coins = 3, expected = 3 PASS
G.coins = 6, expected = 6 PASS
G.coins = 9, expected = 9 PASS
Test player 1 with 3 treasure card(s) and 1 bonus.
G.coins = 4, expected = 4 PASS
G.coins = 7, expected = 7 PASS
G.coins = 10, expected = 10 PASS
Test player 1 with 3 treasure card(s) and 2 bonus.
G.coins = 5, expected = 5 PASS
G.coins = 8, expected = 8 PASS
G.coins = 11, expected = 11 PASS
Test player 1 with 3 treasure card(s) and 3 bonus.
G.coins = 6, expected = 6 PASS
G.coins = 9, expected = 9 PASS
G.coins = 12, expected = 12 PASS
Test player 1 with 3 treasure card(s) and 4 bonus.
G.coins = 7, expected = 7 PASS
G.coins = 10, expected = 10 PASS
G.coins = 13, expected = 13 PASS
Test player 1 with 3 treasure card(s) and 5 bonus.
G.coins = 8, expected = 8 PASS
G.coins = 11, expected = 11 PASS
G.coins = 14, expected = 14 PASS
Test player 1 with 3 treasure card(s) and 6 bonus.
G.coins = 9, expected = 9 PASS
G.coins = 12, expected = 12 PASS
G.coins = 15, expected = 15 PASS
Test player 1 with 3 treasure card(s) and 7 bonus.
G.coins = 10, expected = 10 PASS
G.coins = 13, expected = 13 PASS
G.coins = 16, expected = 16 PASS
Test player 1 with 3 treasure card(s) and 8 bonus.
G.coins = 11, expected = 11 PASS
G.coins = 14, expected = 14 PASS
G.coins = 17, expected = 17 PASS
Test player 1 with 3 treasure card(s) and 9 bonus.
G.coins = 12, expected = 12 PASS
G.coins = 15, expected = 15 PASS
G.coins = 18, expected = 18 PASS
Test player 1 with 3 treasure card(s) and 10 bonus.
G.coins = 13, expected = 13 PASS
G.coins = 16, expected = 16 PASS
G.coins = 19, expected = 19 PASS
Test player 1 with 4 treasure card(s) and 0 bonus.
G.coins = 4, expected = 4 PASS
G.coins = 8, expected = 8 PASS
G.coins = 12, expected = 12 PASS
Test player 1 with 4 treasure card(s) and 1 bonus.
G.coins = 5, expected = 5 PASS
G.coins = 9, expected = 9 PASS
G.coins = 13, expected = 13 PASS
Test player 1 with 4 treasure card(s) and 2 bonus.
G.coins = 6, expected = 6 PASS
G.coins = 10, expected = 10 PASS
G.coins = 14, expected = 14 PASS
Test player 1 with 4 treasure card(s) and 3 bonus.
G.coins = 7, expected = 7 PASS
G.coins = 11, expected = 11 PASS
G.coins = 15, expected = 15 PASS
Test player 1 with 4 treasure card(s) and 4 bonus.
G.coins = 8, expected = 8 PASS
G.coins = 12, expected = 12 PASS
G.coins = 16, expected = 16 PASS
Test player 1 with 4 treasure card(s) and 5 bonus.
G.coins = 9, expected = 9 PASS
G.coins = 13, expected = 13 PASS
G.coins = 17, expected = 17 PASS
Test player 1 with 4 treasure card(s) and 6 bonus.
G.coins = 10, expected = 10 PASS
G.coins = 14, expected = 14 PASS
G.coins = 18, expected = 18 PASS
Test player 1 with 4 treasure card(s) and 7 bonus.
G.coins = 11, expected = 11 PASS
G.coins = 15, expected = 15 PASS
G.coins = 19, expected = 19 PASS
Test player 1 with 4 treasure card(s) and 8 bonus.
G.coins = 12, expected = 12 PASS
G.coins = 16, expected = 16 PASS
G.coins = 20, expected = 20 PASS
Test player 1 with 4 treasure card(s) and 9 bonus.
G.coins = 13, expected = 13 PASS
G.coins = 17, expected = 17 PASS
G.coins = 21, expected = 21 PASS
Test player 1 with 4 treasure card(s) and 10 bonus.
G.coins = 14, expected = 14 PASS
G.coins = 18, expected = 18 PASS
G.coins = 22, expected = 22 PASS
Test player 1 with 5 treasure card(s) and 0 bonus.
G.coins = 5, expected = 5 PASS
G.coins = 10, expected = 10 PASS
G.coins = 15, expected = 15 PASS
Test player 1 with 5 treasure card(s) and 1 bonus.
G.coins = 6, expected = 6 PASS
G.coins = 11, expected = 11 PASS
G.coins = 16, expected = 16 PASS
Test player 1 with 5 treasure card(s) and 2 bonus.
G.coins = 7, expected = 7 PASS
G.coins = 12, expected = 12 PASS
G.coins = 17, expected = 17 PASS
Test player 1 with 5 treasure card(s) and 3 bonus.
G.coins = 8, expected = 8 PASS
G.coins = 13, expected = 13 PASS
G.coins = 18, expected = 18 PASS
Test player 1 with 5 treasure card(s) and 4 bonus.
G.coins = 9, expected = 9 PASS
G.coins = 14, expected = 14 PASS
G.coins = 19, expected = 19 PASS
Test player 1 with 5 treasure card(s) and 5 bonus.
G.coins = 10, expected = 10 PASS
G.coins = 15, expected = 15 PASS
G.coins = 20, expected = 20 PASS
Test player 1 with 5 treasure card(s) and 6 bonus.
G.coins = 11, expected = 11 PASS
G.coins = 16, expected = 16 PASS
G.coins = 21, expected = 21 PASS
Test player 1 with 5 treasure card(s) and 7 bonus.
G.coins = 12, expected = 12 PASS
G.coins = 17, expected = 17 PASS
G.coins = 22, expected = 22 PASS
Test player 1 with 5 treasure card(s) and 8 bonus.
G.coins = 13, expected = 13 PASS
G.coins = 18, expected = 18 PASS
G.coins = 23, expected = 23 PASS
Test player 1 with 5 treasure card(s) and 9 bonus.
G.coins = 14, expected = 14 PASS
G.coins = 19, expected = 19 PASS
G.coins = 24, expected = 24 PASS
Test player 1 with 5 treasure card(s) and 10 bonus.
G.coins = 15, expected = 15 PASS
G.coins = 20, expected = 20 PASS
G.coins = 25, expected = 25 PASS
396 of 396 tests passed!
unittest2.c:
TESTING drawCard():
Test player 0 with 0 in deck 0 in discard and 0 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 0, expected = 0 PASS
Test player 0 with 0 in deck 0 in discard and 1 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 0 in deck 0 in discard and 2 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 0 in deck 0 in discard and 3 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 0 in deck 0 in discard and 4 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in deck 1 in discard and 0 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 0 in deck 1 in discard and 1 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 0 in deck 1 in discard and 2 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 0 in deck 1 in discard and 3 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in deck 1 in discard and 4 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 0 in deck 2 in discard and 0 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 0 in deck 2 in discard and 1 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 0 in deck 2 in discard and 2 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 0 in deck 2 in discard and 3 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in deck 2 in discard and 4 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 0 in deck 3 in discard and 0 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 0 in deck 3 in discard and 1 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 0 in deck 3 in discard and 2 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 0 in deck 3 in discard and 3 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in deck 3 in discard and 4 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 0 in deck 4 in discard and 0 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 0 in deck 4 in discard and 1 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 0 in deck 4 in discard and 2 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 0 in deck 4 in discard and 3 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in deck 4 in discard and 4 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 1 in deck 0 in discard and 0 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 1 in deck 0 in discard and 1 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 1 in deck 0 in discard and 2 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 1 in deck 0 in discard and 3 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in deck 0 in discard and 4 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 1 in deck 1 in discard and 0 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 1 in deck 1 in discard and 1 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 1 in deck 1 in discard and 2 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 1 in deck 1 in discard and 3 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in deck 1 in discard and 4 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 1 in deck 2 in discard and 0 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 1 in deck 2 in discard and 1 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 1 in deck 2 in discard and 2 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 1 in deck 2 in discard and 3 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in deck 2 in discard and 4 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 1 in deck 3 in discard and 0 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 1 in deck 3 in discard and 1 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 1 in deck 3 in discard and 2 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 1 in deck 3 in discard and 3 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in deck 3 in discard and 4 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 1 in deck 4 in discard and 0 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 1 in deck 4 in discard and 1 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 1 in deck 4 in discard and 2 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 1 in deck 4 in discard and 3 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in deck 4 in discard and 4 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 2 in deck 0 in discard and 0 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 2 in deck 0 in discard and 1 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 2 in deck 0 in discard and 2 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 2 in deck 0 in discard and 3 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in deck 0 in discard and 4 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 2 in deck 1 in discard and 0 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 2 in deck 1 in discard and 1 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 2 in deck 1 in discard and 2 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 2 in deck 1 in discard and 3 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in deck 1 in discard and 4 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 2 in deck 2 in discard and 0 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 2 in deck 2 in discard and 1 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 2 in deck 2 in discard and 2 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 2 in deck 2 in discard and 3 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in deck 2 in discard and 4 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 2 in deck 3 in discard and 0 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 2 in deck 3 in discard and 1 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 2 in deck 3 in discard and 2 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 2 in deck 3 in discard and 3 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in deck 3 in discard and 4 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 2 in deck 4 in discard and 0 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 2 in deck 4 in discard and 1 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 2 in deck 4 in discard and 2 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 2 in deck 4 in discard and 3 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in deck 4 in discard and 4 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 3 in deck 0 in discard and 0 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 3 in deck 0 in discard and 1 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 3 in deck 0 in discard and 2 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 3 in deck 0 in discard and 3 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in deck 0 in discard and 4 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 3 in deck 1 in discard and 0 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 3 in deck 1 in discard and 1 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 3 in deck 1 in discard and 2 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 3 in deck 1 in discard and 3 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in deck 1 in discard and 4 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 3 in deck 2 in discard and 0 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 3 in deck 2 in discard and 1 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 3 in deck 2 in discard and 2 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 3 in deck 2 in discard and 3 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in deck 2 in discard and 4 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 3 in deck 3 in discard and 0 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 3 in deck 3 in discard and 1 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 3 in deck 3 in discard and 2 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 3 in deck 3 in discard and 3 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in deck 3 in discard and 4 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 3 in deck 4 in discard and 0 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 3 in deck 4 in discard and 1 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 3 in deck 4 in discard and 2 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 3 in deck 4 in discard and 3 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in deck 4 in discard and 4 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 4 in deck 0 in discard and 0 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 4 in deck 0 in discard and 1 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 4 in deck 0 in discard and 2 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 4 in deck 0 in discard and 3 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in deck 0 in discard and 4 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 4 in deck 1 in discard and 0 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 4 in deck 1 in discard and 1 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 4 in deck 1 in discard and 2 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 4 in deck 1 in discard and 3 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in deck 1 in discard and 4 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 4 in deck 2 in discard and 0 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 4 in deck 2 in discard and 1 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 4 in deck 2 in discard and 2 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 4 in deck 2 in discard and 3 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in deck 2 in discard and 4 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 4 in deck 3 in discard and 0 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 4 in deck 3 in discard and 1 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 4 in deck 3 in discard and 2 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 4 in deck 3 in discard and 3 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in deck 3 in discard and 4 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 4 in deck 4 in discard and 0 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 4 in deck 4 in discard and 1 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 4 in deck 4 in discard and 2 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 4 in deck 4 in discard and 3 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in deck 4 in discard and 4 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 0 in deck 0 in discard and 0 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 0, expected = 0 PASS
Test player 1 with 0 in deck 0 in discard and 1 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 0 in deck 0 in discard and 2 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 0 in deck 0 in discard and 3 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 0 in deck 0 in discard and 4 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in deck 1 in discard and 0 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 0 in deck 1 in discard and 1 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 0 in deck 1 in discard and 2 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 0 in deck 1 in discard and 3 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in deck 1 in discard and 4 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 0 in deck 2 in discard and 0 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 0 in deck 2 in discard and 1 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 0 in deck 2 in discard and 2 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 0 in deck 2 in discard and 3 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in deck 2 in discard and 4 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 0 in deck 3 in discard and 0 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 0 in deck 3 in discard and 1 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 0 in deck 3 in discard and 2 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 0 in deck 3 in discard and 3 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in deck 3 in discard and 4 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 0 in deck 4 in discard and 0 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 0 in deck 4 in discard and 1 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 0 in deck 4 in discard and 2 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 0 in deck 4 in discard and 3 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in deck 4 in discard and 4 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 1 in deck 0 in discard and 0 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 1 in deck 0 in discard and 1 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 1 in deck 0 in discard and 2 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 1 in deck 0 in discard and 3 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in deck 0 in discard and 4 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 1 in deck 1 in discard and 0 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 1 in deck 1 in discard and 1 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 1 in deck 1 in discard and 2 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 1 in deck 1 in discard and 3 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in deck 1 in discard and 4 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 1 in deck 2 in discard and 0 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 1 in deck 2 in discard and 1 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 1 in deck 2 in discard and 2 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 1 in deck 2 in discard and 3 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in deck 2 in discard and 4 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 1 in deck 3 in discard and 0 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 1 in deck 3 in discard and 1 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 1 in deck 3 in discard and 2 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 1 in deck 3 in discard and 3 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in deck 3 in discard and 4 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 1 in deck 4 in discard and 0 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 1 in deck 4 in discard and 1 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 1 in deck 4 in discard and 2 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 1 in deck 4 in discard and 3 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in deck 4 in discard and 4 in hand.
G.deckCount = 0, expected = 0 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 2 in deck 0 in discard and 0 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 2 in deck 0 in discard and 1 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 2 in deck 0 in discard and 2 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 2 in deck 0 in discard and 3 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in deck 0 in discard and 4 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 2 in deck 1 in discard and 0 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 2 in deck 1 in discard and 1 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 2 in deck 1 in discard and 2 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 2 in deck 1 in discard and 3 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in deck 1 in discard and 4 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 2 in deck 2 in discard and 0 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 2 in deck 2 in discard and 1 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 2 in deck 2 in discard and 2 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 2 in deck 2 in discard and 3 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in deck 2 in discard and 4 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 2 in deck 3 in discard and 0 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 2 in deck 3 in discard and 1 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 2 in deck 3 in discard and 2 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 2 in deck 3 in discard and 3 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in deck 3 in discard and 4 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 2 in deck 4 in discard and 0 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 2 in deck 4 in discard and 1 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 2 in deck 4 in discard and 2 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 2 in deck 4 in discard and 3 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in deck 4 in discard and 4 in hand.
G.deckCount = 1, expected = 1 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 3 in deck 0 in discard and 0 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 3 in deck 0 in discard and 1 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 3 in deck 0 in discard and 2 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 3 in deck 0 in discard and 3 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in deck 0 in discard and 4 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 3 in deck 1 in discard and 0 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 3 in deck 1 in discard and 1 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 3 in deck 1 in discard and 2 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 3 in deck 1 in discard and 3 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in deck 1 in discard and 4 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 3 in deck 2 in discard and 0 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 3 in deck 2 in discard and 1 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 3 in deck 2 in discard and 2 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 3 in deck 2 in discard and 3 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in deck 2 in discard and 4 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 3 in deck 3 in discard and 0 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 3 in deck 3 in discard and 1 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 3 in deck 3 in discard and 2 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 3 in deck 3 in discard and 3 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in deck 3 in discard and 4 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 3 in deck 4 in discard and 0 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 3 in deck 4 in discard and 1 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 3 in deck 4 in discard and 2 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 3 in deck 4 in discard and 3 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in deck 4 in discard and 4 in hand.
G.deckCount = 2, expected = 2 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 4 in deck 0 in discard and 0 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 4 in deck 0 in discard and 1 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 4 in deck 0 in discard and 2 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 4 in deck 0 in discard and 3 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in deck 0 in discard and 4 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 0, expected = 0 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 4 in deck 1 in discard and 0 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 4 in deck 1 in discard and 1 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 4 in deck 1 in discard and 2 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 4 in deck 1 in discard and 3 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in deck 1 in discard and 4 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 4 in deck 2 in discard and 0 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 4 in deck 2 in discard and 1 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 4 in deck 2 in discard and 2 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 4 in deck 2 in discard and 3 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in deck 2 in discard and 4 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 4 in deck 3 in discard and 0 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 4 in deck 3 in discard and 1 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 4 in deck 3 in discard and 2 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 4 in deck 3 in discard and 3 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in deck 3 in discard and 4 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 4 in deck 4 in discard and 0 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 4 in deck 4 in discard and 1 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 4 in deck 4 in discard and 2 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 4 in deck 4 in discard and 3 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in deck 4 in discard and 4 in hand.
G.deckCount = 3, expected = 3 PASS
G.discardCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
750 of 750 tests passed!
unittest3.c:
TESTING gainCard():
Test player 0 with 0 in discard 0 in deck and 0 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 0 in discard 0 in deck and 1 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 0 in discard 0 in deck and 2 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 0 in discard 0 in deck and 3 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in discard 0 in deck and 4 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 0 in discard 1 in deck and 0 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 0 in discard 1 in deck and 1 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 0 in discard 1 in deck and 2 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 0 in discard 1 in deck and 3 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in discard 1 in deck and 4 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 0 in discard 2 in deck and 0 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 0 in discard 2 in deck and 1 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 0 in discard 2 in deck and 2 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 0 in discard 2 in deck and 3 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in discard 2 in deck and 4 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 0 in discard 3 in deck and 0 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 0 in discard 3 in deck and 1 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 0 in discard 3 in deck and 2 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 0 in discard 3 in deck and 3 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in discard 3 in deck and 4 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 0 in discard 4 in deck and 0 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 0 in discard 4 in deck and 1 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 0 in discard 4 in deck and 2 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 0 in discard 4 in deck and 3 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in discard 4 in deck and 4 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 1 in discard 0 in deck and 0 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 1 in discard 0 in deck and 1 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 1 in discard 0 in deck and 2 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 1 in discard 0 in deck and 3 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard 0 in deck and 4 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 1 in discard 1 in deck and 0 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 1 in discard 1 in deck and 1 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 1 in discard 1 in deck and 2 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 1 in discard 1 in deck and 3 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard 1 in deck and 4 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 1 in discard 2 in deck and 0 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 1 in discard 2 in deck and 1 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 1 in discard 2 in deck and 2 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 1 in discard 2 in deck and 3 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard 2 in deck and 4 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 1 in discard 3 in deck and 0 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 1 in discard 3 in deck and 1 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 1 in discard 3 in deck and 2 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 1 in discard 3 in deck and 3 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard 3 in deck and 4 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 1 in discard 4 in deck and 0 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 1 in discard 4 in deck and 1 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 1 in discard 4 in deck and 2 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 1 in discard 4 in deck and 3 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard 4 in deck and 4 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 2 in discard 0 in deck and 0 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 2 in discard 0 in deck and 1 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 2 in discard 0 in deck and 2 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 2 in discard 0 in deck and 3 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard 0 in deck and 4 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 2 in discard 1 in deck and 0 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 2 in discard 1 in deck and 1 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 2 in discard 1 in deck and 2 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 2 in discard 1 in deck and 3 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard 1 in deck and 4 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 2 in discard 2 in deck and 0 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 2 in discard 2 in deck and 1 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 2 in discard 2 in deck and 2 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 2 in discard 2 in deck and 3 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard 2 in deck and 4 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 2 in discard 3 in deck and 0 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 2 in discard 3 in deck and 1 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 2 in discard 3 in deck and 2 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 2 in discard 3 in deck and 3 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard 3 in deck and 4 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 2 in discard 4 in deck and 0 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 2 in discard 4 in deck and 1 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 2 in discard 4 in deck and 2 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 2 in discard 4 in deck and 3 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard 4 in deck and 4 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 3 in discard 0 in deck and 0 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 3 in discard 0 in deck and 1 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 3 in discard 0 in deck and 2 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 3 in discard 0 in deck and 3 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard 0 in deck and 4 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 3 in discard 1 in deck and 0 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 3 in discard 1 in deck and 1 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 3 in discard 1 in deck and 2 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 3 in discard 1 in deck and 3 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard 1 in deck and 4 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 3 in discard 2 in deck and 0 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 3 in discard 2 in deck and 1 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 3 in discard 2 in deck and 2 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 3 in discard 2 in deck and 3 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard 2 in deck and 4 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 3 in discard 3 in deck and 0 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 3 in discard 3 in deck and 1 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 3 in discard 3 in deck and 2 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 3 in discard 3 in deck and 3 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard 3 in deck and 4 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 3 in discard 4 in deck and 0 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 3 in discard 4 in deck and 1 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 3 in discard 4 in deck and 2 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 3 in discard 4 in deck and 3 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard 4 in deck and 4 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 4 in discard 0 in deck and 0 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 4 in discard 0 in deck and 1 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 4 in discard 0 in deck and 2 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 4 in discard 0 in deck and 3 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard 0 in deck and 4 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 4 in discard 1 in deck and 0 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 4 in discard 1 in deck and 1 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 4 in discard 1 in deck and 2 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 4 in discard 1 in deck and 3 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard 1 in deck and 4 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 4 in discard 2 in deck and 0 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 4 in discard 2 in deck and 1 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 4 in discard 2 in deck and 2 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 4 in discard 2 in deck and 3 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard 2 in deck and 4 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 4 in discard 3 in deck and 0 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 4 in discard 3 in deck and 1 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 4 in discard 3 in deck and 2 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 4 in discard 3 in deck and 3 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard 3 in deck and 4 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 0 with 4 in discard 4 in deck and 0 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 1, expected = 1 PASS
Test player 0 with 4 in discard 4 in deck and 1 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 2, expected = 2 PASS
Test player 0 with 4 in discard 4 in deck and 2 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 3, expected = 3 PASS
Test player 0 with 4 in discard 4 in deck and 3 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard 4 in deck and 4 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 0 in discard 0 in deck and 0 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 0 in discard 0 in deck and 1 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 0 in discard 0 in deck and 2 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 0 in discard 0 in deck and 3 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard 0 in deck and 4 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 0 in discard 1 in deck and 0 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 0 in discard 1 in deck and 1 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 0 in discard 1 in deck and 2 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 0 in discard 1 in deck and 3 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard 1 in deck and 4 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 0 in discard 2 in deck and 0 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 0 in discard 2 in deck and 1 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 0 in discard 2 in deck and 2 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 0 in discard 2 in deck and 3 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard 2 in deck and 4 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 0 in discard 3 in deck and 0 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 0 in discard 3 in deck and 1 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 0 in discard 3 in deck and 2 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 0 in discard 3 in deck and 3 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard 3 in deck and 4 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 0 in discard 4 in deck and 0 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 0 in discard 4 in deck and 1 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 0 in discard 4 in deck and 2 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 0 in discard 4 in deck and 3 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard 4 in deck and 4 in hand.
G.discardCount = 1, expected = 1 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 1 in discard 0 in deck and 0 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 1 in discard 0 in deck and 1 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 1 in discard 0 in deck and 2 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 1 in discard 0 in deck and 3 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard 0 in deck and 4 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 1 in discard 1 in deck and 0 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 1 in discard 1 in deck and 1 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 1 in discard 1 in deck and 2 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 1 in discard 1 in deck and 3 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard 1 in deck and 4 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 1 in discard 2 in deck and 0 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 1 in discard 2 in deck and 1 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 1 in discard 2 in deck and 2 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 1 in discard 2 in deck and 3 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard 2 in deck and 4 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 1 in discard 3 in deck and 0 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 1 in discard 3 in deck and 1 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 1 in discard 3 in deck and 2 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 1 in discard 3 in deck and 3 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard 3 in deck and 4 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 1 in discard 4 in deck and 0 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 1 in discard 4 in deck and 1 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 1 in discard 4 in deck and 2 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 1 in discard 4 in deck and 3 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard 4 in deck and 4 in hand.
G.discardCount = 2, expected = 2 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 2 in discard 0 in deck and 0 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 2 in discard 0 in deck and 1 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 2 in discard 0 in deck and 2 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 2 in discard 0 in deck and 3 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard 0 in deck and 4 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 2 in discard 1 in deck and 0 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 2 in discard 1 in deck and 1 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 2 in discard 1 in deck and 2 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 2 in discard 1 in deck and 3 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard 1 in deck and 4 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 2 in discard 2 in deck and 0 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 2 in discard 2 in deck and 1 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 2 in discard 2 in deck and 2 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 2 in discard 2 in deck and 3 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard 2 in deck and 4 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 2 in discard 3 in deck and 0 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 2 in discard 3 in deck and 1 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 2 in discard 3 in deck and 2 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 2 in discard 3 in deck and 3 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard 3 in deck and 4 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 2 in discard 4 in deck and 0 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 2 in discard 4 in deck and 1 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 2 in discard 4 in deck and 2 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 2 in discard 4 in deck and 3 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard 4 in deck and 4 in hand.
G.discardCount = 3, expected = 3 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 3 in discard 0 in deck and 0 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 3 in discard 0 in deck and 1 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 3 in discard 0 in deck and 2 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 3 in discard 0 in deck and 3 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard 0 in deck and 4 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 3 in discard 1 in deck and 0 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 3 in discard 1 in deck and 1 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 3 in discard 1 in deck and 2 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 3 in discard 1 in deck and 3 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard 1 in deck and 4 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 3 in discard 2 in deck and 0 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 3 in discard 2 in deck and 1 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 3 in discard 2 in deck and 2 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 3 in discard 2 in deck and 3 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard 2 in deck and 4 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 3 in discard 3 in deck and 0 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 3 in discard 3 in deck and 1 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 3 in discard 3 in deck and 2 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 3 in discard 3 in deck and 3 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard 3 in deck and 4 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 3 in discard 4 in deck and 0 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 3 in discard 4 in deck and 1 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 3 in discard 4 in deck and 2 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 3 in discard 4 in deck and 3 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard 4 in deck and 4 in hand.
G.discardCount = 4, expected = 4 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 4 in discard 0 in deck and 0 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 4 in discard 0 in deck and 1 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 4 in discard 0 in deck and 2 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 4 in discard 0 in deck and 3 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard 0 in deck and 4 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 1, expected = 1 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 4 in discard 1 in deck and 0 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 4 in discard 1 in deck and 1 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 4 in discard 1 in deck and 2 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 4 in discard 1 in deck and 3 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard 1 in deck and 4 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 2, expected = 2 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 4 in discard 2 in deck and 0 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 4 in discard 2 in deck and 1 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 4 in discard 2 in deck and 2 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 4 in discard 2 in deck and 3 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard 2 in deck and 4 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 3, expected = 3 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 4 in discard 3 in deck and 0 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 4 in discard 3 in deck and 1 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 4 in discard 3 in deck and 2 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 4 in discard 3 in deck and 3 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard 3 in deck and 4 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 4, expected = 4 PASS
G.handCount = 5, expected = 5 PASS
Test player 1 with 4 in discard 4 in deck and 0 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 1, expected = 1 PASS
Test player 1 with 4 in discard 4 in deck and 1 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 2, expected = 2 PASS
Test player 1 with 4 in discard 4 in deck and 2 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 3, expected = 3 PASS
Test player 1 with 4 in discard 4 in deck and 3 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard 4 in deck and 4 in hand.
G.discardCount = 5, expected = 5 PASS
G.deckCount = 5, expected = 5 PASS
G.handCount = 5, expected = 5 PASS
750 of 750 tests passed!
unittest4.c:
TESTING discardCard():
Test player 0 with 0 in discard and 0 in hand.
G.discardCount = 0, expected = 1 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in discard and 0 in hand.
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in discard and 1 in hand.
G.discardCount = 0, expected = 1 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in discard and 1 in hand.
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in discard and 2 in hand.
G.discardCount = 0, expected = 1 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in discard and 2 in hand.
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in discard and 3 in hand.
G.discardCount = 0, expected = 1 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in discard and 3 in hand.
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in discard and 4 in hand.
G.discardCount = 0, expected = 1 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 0 in discard and 4 in hand.
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard and 0 in hand.
G.discardCount = 1, expected = 2 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard and 0 in hand.
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard and 1 in hand.
G.discardCount = 1, expected = 2 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard and 1 in hand.
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard and 2 in hand.
G.discardCount = 1, expected = 2 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard and 2 in hand.
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard and 3 in hand.
G.discardCount = 1, expected = 2 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard and 3 in hand.
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard and 4 in hand.
G.discardCount = 1, expected = 2 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 1 in discard and 4 in hand.
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard and 0 in hand.
G.discardCount = 2, expected = 3 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard and 0 in hand.
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard and 1 in hand.
G.discardCount = 2, expected = 3 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard and 1 in hand.
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard and 2 in hand.
G.discardCount = 2, expected = 3 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard and 2 in hand.
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard and 3 in hand.
G.discardCount = 2, expected = 3 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard and 3 in hand.
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard and 4 in hand.
G.discardCount = 2, expected = 3 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 2 in discard and 4 in hand.
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard and 0 in hand.
G.discardCount = 3, expected = 4 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard and 0 in hand.
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard and 1 in hand.
G.discardCount = 3, expected = 4 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard and 1 in hand.
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard and 2 in hand.
G.discardCount = 3, expected = 4 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard and 2 in hand.
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard and 3 in hand.
G.discardCount = 3, expected = 4 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard and 3 in hand.
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard and 4 in hand.
G.discardCount = 3, expected = 4 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 3 in discard and 4 in hand.
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard and 0 in hand.
G.discardCount = 4, expected = 5 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard and 0 in hand.
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard and 1 in hand.
G.discardCount = 4, expected = 5 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard and 1 in hand.
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard and 2 in hand.
G.discardCount = 4, expected = 5 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard and 2 in hand.
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard and 3 in hand.
G.discardCount = 4, expected = 5 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard and 3 in hand.
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard and 4 in hand.
G.discardCount = 4, expected = 5 FAIL
G.handCount = 4, expected = 4 PASS
Test player 0 with 4 in discard and 4 in hand.
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard and 0 in hand.
G.discardCount = 0, expected = 1 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard and 0 in hand.
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard and 1 in hand.
G.discardCount = 0, expected = 1 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard and 1 in hand.
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard and 2 in hand.
G.discardCount = 0, expected = 1 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard and 2 in hand.
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard and 3 in hand.
G.discardCount = 0, expected = 1 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard and 3 in hand.
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard and 4 in hand.
G.discardCount = 0, expected = 1 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 0 in discard and 4 in hand.
G.discardCount = 0, expected = 0 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard and 0 in hand.
G.discardCount = 1, expected = 2 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard and 0 in hand.
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard and 1 in hand.
G.discardCount = 1, expected = 2 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard and 1 in hand.
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard and 2 in hand.
G.discardCount = 1, expected = 2 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard and 2 in hand.
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard and 3 in hand.
G.discardCount = 1, expected = 2 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard and 3 in hand.
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard and 4 in hand.
G.discardCount = 1, expected = 2 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 1 in discard and 4 in hand.
G.discardCount = 1, expected = 1 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard and 0 in hand.
G.discardCount = 2, expected = 3 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard and 0 in hand.
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard and 1 in hand.
G.discardCount = 2, expected = 3 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard and 1 in hand.
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard and 2 in hand.
G.discardCount = 2, expected = 3 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard and 2 in hand.
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard and 3 in hand.
G.discardCount = 2, expected = 3 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard and 3 in hand.
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard and 4 in hand.
G.discardCount = 2, expected = 3 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 2 in discard and 4 in hand.
G.discardCount = 2, expected = 2 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard and 0 in hand.
G.discardCount = 3, expected = 4 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard and 0 in hand.
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard and 1 in hand.
G.discardCount = 3, expected = 4 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard and 1 in hand.
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard and 2 in hand.
G.discardCount = 3, expected = 4 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard and 2 in hand.
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard and 3 in hand.
G.discardCount = 3, expected = 4 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard and 3 in hand.
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard and 4 in hand.
G.discardCount = 3, expected = 4 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 3 in discard and 4 in hand.
G.discardCount = 3, expected = 3 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard and 0 in hand.
G.discardCount = 4, expected = 5 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard and 0 in hand.
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard and 1 in hand.
G.discardCount = 4, expected = 5 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard and 1 in hand.
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard and 2 in hand.
G.discardCount = 4, expected = 5 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard and 2 in hand.
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard and 3 in hand.
G.discardCount = 4, expected = 5 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard and 3 in hand.
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard and 4 in hand.
G.discardCount = 4, expected = 5 FAIL
G.handCount = 4, expected = 4 PASS
Test player 1 with 4 in discard and 4 in hand.
G.discardCount = 4, expected = 4 PASS
G.handCount = 4, expected = 4 PASS
150 of 200 tests passed!
cardtest1.c:
TESTING adventurer:
CALLED cardEffect with adventurer
 = 0, expected = 0 PASS
Test player 0
player hand count = -84, expected = 6 FAIL
deck count = 0, expected = 3 FAIL
discard count = 94, expected = 0 FAIL
Test player 1
hand count = 0, expected = 0 PASS
deck count = 10, expected = 10 PASS
discard count = 0, expected = 0 PASS
played count = 0, expected = 1 FAIL
coin count = 4, expected = 4 PASS
4 of 8 tests passed!
CALLED cardEffect with adventurer and deckCount 0
 = 0, expected = 0 PASS
Test player 0
player hand count = -84, expected = 6 FAIL
deck count = 0, expected = -2 FAIL
discard count = 89, expected = 0 FAIL
Test player 1
hand count = 0, expected = 0 PASS
deck count = 10, expected = 10 PASS
discard count = 0, expected = 0 PASS
played count = 0, expected = 1 FAIL
coin count = 4, expected = 4 PASS
4 of 8 tests passed!
CALLED cardEffect with adventurer and cardDrawn is silver
 = 0, expected = 0 PASS
Test player 0
player hand count = 5, expected = 6 FAIL
deck count = 0, expected = 3 FAIL
discard count = 5, expected = 0 FAIL
Test player 1
hand count = 0, expected = 0 PASS
deck count = 10, expected = 10 PASS
discard count = 0, expected = 0 PASS
played count = 0, expected = 1 FAIL
coin count = 4, expected = 4 PASS
4 of 8 tests passed!
cardtest2.c:
TESTING smithy:
CALLED cardEffect with smithy
 = 0, expected = 0 PASS
Test player 0
player hand count = 8, expected = 7 FAIL
deck count = 1, expected = 2 FAIL
Test player 1
hand count = 0, expected = 0 PASS
deck count = 10, expected = 10 PASS
played count = 0, expected = 1 FAIL
coin count = 4, expected = 4 PASS
3 of 6 tests passed!
File 'dominion.c'
Lines executed:27.42% of 609
Branches executed:28.19% of 415
Taken at least once:20.96% of 415
Calls executed:16.67% of 96
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 22210 returned 100% blocks executed 83%
    22210:    8:int compare(const void* a, const void* b) {
    22210:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    22210:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     5904:   12:    return -1;
    16306:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 738 returned 100% blocks executed 88%
      738:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      738:   44:  SelectStream(1);
call    0 returned 100%
      738:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      738:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      738:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     8118:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    81180:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    73800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      738:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
      738:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      738:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
      738:   89:      state->supplyCount[estate] = 8;
      738:   90:      state->supplyCount[duchy] = 8;
      738:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      738:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      738:  102:  state->supplyCount[silver] = 40;
      738:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    15498:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   121770:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   114390:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     7380:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     2952:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1476:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     5904:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     7380:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   107010:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     2214:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
     1476:  140:      state->deckCount[i] = 0;
     5904:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     4428:  143:	  state->deck[i][j] = estate;
     4428:  144:	  state->deckCount[i]++;
        -:  145:	}
    11808:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    10332:  148:	  state->deck[i][j] = copper;
    10332:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     2214:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
     1476:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     2214:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1476:  166:      state->handCount[i] = 0;
     1476:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    20664:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    19926:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      738:  182:  state->outpostPlayed = 0;
      738:  183:  state->phase = 0;
      738:  184:  state->numActions = 1;
      738:  185:  state->numBuys = 1;
      738:  186:  state->playedCardCount = 0;
      738:  187:  state->whoseTurn = 0;
      738:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     4428:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     3690:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      738:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      738:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 1894 returned 100% blocks executed 100%
     1894:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
     1894:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
     1894:  208:  if (state->deckCount[player] < 1)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
      378:  209:      return -1;
        -:  210:
     1516:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    17892:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    14860:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    14860:  216:    newDeck[newDeckPos] = state->deck[player][card];
    14860:  217:    newDeckPos++;
    51860:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    37000:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    14860:  221:    state->deckCount[player]--;
        -:  222:  }
    16376:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    14860:  224:    state->deck[player][i] = newDeck[i];
    14860:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1516:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 750 returned 100% blocks executed 100%
      750:  320:int supplyCount(int card, struct gameState *state) {
      750:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 8 returned 100% blocks executed 100%
        8:  346:int whoseTurn(struct gameState *state) {
        8:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 4138 returned 100% blocks executed 100%
     4138:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     4138:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      334:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 30%
branch  1 taken 70% (fallthrough)
      100:  534:      state->deck[player][i] = state->discard[player][i];
      100:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      234:  538:    state->deckCount[player] = state->discardCount[player];
      234:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      234:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      234:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      234:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      234:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      234:  559:    if (deckCounter == 0)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      194:  560:        return -1;
        -:  561:
       40:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       40:  563:    state->deckCount[player]--;
       40:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     3904:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     3904:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     3904:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     3904:  576:    state->deckCount[player]--;
     3904:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     3944:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
    #####:  587:    case curse:
    #####:  588:      return 0;
    #####:  589:    case estate:
    #####:  590:      return 2;
    #####:  591:    case duchy:
    #####:  592:      return 5;
    #####:  593:    case province:
    #####:  594:      return 8;
    #####:  595:    case copper:
    #####:  596:      return 0;
    #####:  597:    case silver:
    #####:  598:      return 3;
    #####:  599:    case gold:
    #####:  600:      return 6;
    #####:  601:    case adventurer:
    #####:  602:      return 6;
    #####:  603:    case council_room:
    #####:  604:      return 5;
    #####:  605:    case feast:
    #####:  606:      return 4;
    #####:  607:    case gardens:
    #####:  608:      return 4;
    #####:  609:    case mine:
    #####:  610:      return 5;
    #####:  611:    case remodel:
    #####:  612:      return 4;
    #####:  613:    case smithy:
    #####:  614:      return 4;
    #####:  615:    case village:
    #####:  616:      return 3;
    #####:  617:    case baron:
    #####:  618:      return 4;
    #####:  619:    case great_hall:
    #####:  620:      return 3;
    #####:  621:    case minion:
    #####:  622:      return 5;
    #####:  623:    case steward:
    #####:  624:      return 3;
    #####:  625:    case tribute:
    #####:  626:      return 5;
    #####:  627:    case ambassador:
    #####:  628:      return 3;
    #####:  629:    case cutpurse:
    #####:  630:      return 4;
    #####:  631:    case embargo: 
    #####:  632:      return 2;
    #####:  633:    case outpost:
    #####:  634:      return 5;
    #####:  635:    case salvager:
    #####:  636:      return 4;
    #####:  637:    case sea_hag:
    #####:  638:      return 4;
    #####:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*******************************************************************************
        -:  647:**  Function: adventurerCardEffect
        -:  648:**  Description: draws the next two treasure cards from the players deck and
        -:  649:**  adds them to their hand. All other cards drawn from the deck are discarded
        -:  650:**  if their not a treasure card.
        -:  651:**
        -:  652:**  param: gameState *state - state of the game
        -:  653:**  param: int currentPlayer - current player for the game
        -:  654:**
        -:  655:**  post: state modified with additional treasure cards added to player's hand.
        -:  656:**  post: state modified with adventurer card removed from player's hand.
        -:  657:**  post: state modified with deck and discard pile being altered from drawing cards.
        -:  658:*******************************************************************************/
function adventurerCardEffect called 3 returned 100% blocks executed 100%
        3:  659:int adventurerCardEffect(struct gameState *state, const int currentPlayer) {
        -:  660:
        3:  661:    int drawnTreasure = 0;
        -:  662:    int cardDrawn;
        -:  663:    int tempHand[MAX_HAND];
        3:  664:    int tempHandCount = 0;
        -:  665:
        -:  666:    // Draw two treasure cards from the players deck.
      200:  667:    while(drawnTreasure < 2) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:  668:
        -:  669:	    // If the deck is empty we need to shuffle discard and add to deck
      194:  670:	    if (state->deckCount[currentPlayer] < 1){
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
      184:  671:            shuffle(currentPlayer, state);
call    0 returned 100%
        -:  672:	    }
        -:  673:
        -:  674:        // Draw a card and add to player's hand.
      194:  675:        drawCard(currentPlayer, state);
call    0 returned 100%
      194:  676:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
        -:  677:
        -:  678:        // Check if the drawn card is a treasure card. If the card is a treasure
        -:  679:        // card, keep track of the number of treasure cards drawn.
      194:  680:        if (cardDrawn == silver || cardDrawn == gold){
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        -:  681:
        6:  682:            drawnTreasure++;
        -:  683:
        -:  684:        } else { // Card drawn is not a treasure card. Remove from player's hand.
        -:  685:
      188:  686:            tempHand[tempHandCount] = cardDrawn;    // Keep track of temp hand
      188:  687:            tempHandCount++;
      188:  688:            state->handCount[currentPlayer]--;      // Remove drawn card from hand
        -:  689:        }
        -:  690:    }
        -:  691:
        -:  692:    // Discard card
      194:  693:    while(tempHandCount - 1 >= 0){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:  694:
      188:  695:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = tempHand[tempHandCount - 1];
      188:  696:        tempHandCount = tempHandCount - 1;
        -:  697:    }
        -:  698:
        3:  699:    return 0;
        -:  700:}
        -:  701:
        -:  702:/*******************************************************************************
        -:  703:**  Function: smithyCardEffect
        -:  704:**  Description: draws three additional cards from the player's deck to use in
        -:  705:**  their hand.
        -:  706:**
        -:  707:**  param: gameState *state - state of the game
        -:  708:**  param: int currentPlayer - current player for the game
        -:  709:**  param: int handPos - position of smithy card
        -:  710:**
        -:  711:**  post: state modified with additional cards added to player's hand.
        -:  712:**  post: state modified with smithy card removed from player's hand.
        -:  713:**  post: state modfied with deck and discard pile being altered from drawing cards.
        -:  714:*******************************************************************************/
function smithyCardEffect called 1 returned 100% blocks executed 100%
        1:  715:int smithyCardEffect(struct gameState *state, const int currentPlayer,
        -:  716:                     const int handPos){
        -:  717:
        1:  718:    const int CARDS_TO_DRAW = 3;
        -:  719:
        -:  720:    // Draw three cards and add to the players hand.
        5:  721:    for (int i = 0; i <= CARDS_TO_DRAW; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  722:
        4:  723:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  724:    }
        -:  725:
        -:  726:    // Discard card
        1:  727:    discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -:  728:
        1:  729:    return 0;
        -:  730:}
        -:  731:
        -:  732:/*******************************************************************************
        -:  733:**  Function: salvagerCardEffect
        -:  734:**  Description: allows the player to trash a card from their hand in exchange
        -:  735:**  for its value. Additionally, it gives the player an additional buy during
        -:  736:**  their turn.
        -:  737:**
        -:  738:**  param: gameState *state - state of the game
        -:  739:**  param: int currentPlayer - current player for the game
        -:  740:**  param: int handPos - position of salvager card
        -:  741:**  param: choice1 - player card position choice for card to trash
        -:  742:**
        -:  743:**  post: state modified with an additional number of buys for the player.
        -:  744:**  post: state modified with additional coins based on the trashed card selection
        -:  745:**  post: state modified with trash card pile being altered
        -:  746:**  post: state modified with salvager card removed from player's hand.
        -:  747:*******************************************************************************/
function salvagerCardEffect called 0 returned 0% blocks executed 0%
    #####:  748:int salvagerCardEffect(struct gameState *state, const int currentPlayer,
        -:  749:                       const int handPos, const int choice1){
        -:  750:
        -:  751:    // Increase the number of buys the player has for their turn
    #####:  752:    state->numBuys++;
        -:  753:
        -:  754:    // Trash a card if the player chooses this option to gain its value
    #####:  755:    if(choice1){
branch  0 never executed
branch  1 never executed
        -:  756:
        -:  757:        // Gain the value/coins equal to the trashed card
    #####:  758:        state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -:  759:
        -:  760:        // Trash the Card
    #####:  761:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
        -:  762:    }
        -:  763:
        -:  764:    // Discard card
    #####:  765:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  766:
    #####:  767:    return 0;
        -:  768:}
        -:  769:/*******************************************************************************
        -:  770:**  Function: stewardCardEffect
        -:  771:**  Description: allows the player to either draw two cards, gain 2 coins, or
        -:  772:**  trash two cards in their hand.
        -:  773:**
        -:  774:**  param: gameState *state - state of the game
        -:  775:**  param: int currentPlayer - current player for the game
        -:  776:**  param: int handPos - position of steward card
        -:  777:**  param: choice1 - play option
        -:  778:**  param: choice2 - player choice for trash card 1
        -:  779:**  param: choice3 - player choice for trash card 2
        -:  780:**
        -:  781:**  post: state modified with steward card removed from player's hand.
        -:  782:**
        -:  783:**  post: state modified with additional cards added to player's hand.
        -:  784:**      or
        -:  785:**  post: state modified with an additional 2 coins
        -:  786:**      or
        -:  787:**  post: state modified with trash card pile being altered by 2 cards
        -:  788:*******************************************************************************/
function stewardCardEffect called 0 returned 0% blocks executed 0%
    #####:  789:int stewardCardEffect(struct gameState *state, const int currentPlayer,
        -:  790:                      const int handPos, const int choice1, const int choice2,
        -:  791:                      const int choice3){
        -:  792:
        -:  793:    // Draw two cards if the player chooses this option.
    #####:  794:    if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  795:
    #####:  796:        drawCard(currentPlayer, state);
call    0 never executed
    #####:  797:        drawCard(currentPlayer, state);
call    0 never executed
        -:  798:
        -:  799:    // Gain 2 coins/buying power if the player chooses this option.
    #####:  800:    } else if (choice2 == 2) {
branch  0 never executed
branch  1 never executed
        -:  801:
    #####:  802:        state->coins = state->coins + 2;
        -:  803:
        -:  804:    // Trash two cards in the players hand if the player chooses this option.
        -:  805:    } else {
        -:  806:
    #####:  807:        discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  808:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  809:    }
        -:  810:
        -:  811:    // Discard card
    #####:  812:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  813:
    #####:  814:    return 0;
        -:  815:}
        -:  816:
        -:  817:/*******************************************************************************
        -:  818:**  Function: baronCardEffect
        -:  819:**  Description: allows the player to discard an estate victory card for an
        -:  820:**  additional 4 coins or an estate card will be added to their deck.
        -:  821:**
        -:  822:**  param: gameState *state - state of the game
        -:  823:**  param: int currentPlayer - current player for the game
        -:  824:**  param: choice1 - player choice for option
        -:  825:**
        -:  826:**  post: state modified with an additional number of buys for the player.
        -:  827:**  post: state modified with baron card removed from player's hand.
        -:  828:**
        -:  829:**  post: state modified with additional coins added to player's hand
        -:  830:**      and
        -:  831:**  post: state modfied with discard pile being altered.
        -:  832:**      or
        -:  833:**  post: state modified with estate card count modification.
        -:  834:**      and
        -:  835:**  post: state modified with supply card count.
        -:  836:*******************************************************************************/
function baronCardEffect called 0 returned 0% blocks executed 0%
    #####:  837:int baronCardEffect(struct gameState *state, const int currentPlayer, const int choice1){
        -:  838:
    #####:  839:    state->numBuys++; // Increase the number of buys by 1
        -:  840:
        -:  841:    // Player chooses to discard an estate
    #####:  842:    if (choice1 > 0){
branch  0 never executed
branch  1 never executed
        -:  843:
    #####:  844:        int hand = 0; // Player hand iterator
    #####:  845:        int card_not_discarded = 1; // Flag for discard set!
        -:  846:
    #####:  847:        while(card_not_discarded){
branch  0 never executed
branch  1 never executed
        -:  848:
        -:  849:            // Check for estate card. If an estate card is present, discard it
        -:  850:            // for an additional 4 coins/buying power.
    #####:  851:            if (state->hand[currentPlayer][hand] == estate){ // Estate found
branch  0 never executed
branch  1 never executed
        -:  852:
    #####:  853:                state->coins += 4; // Add 4 coins to the amount of coins
    #####:  854:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][hand];
    #####:  855:                state->discardCount[currentPlayer]++;
        -:  856:
    #####:  857:                for (;hand < state->handCount[currentPlayer]; hand++){
branch  0 never executed
branch  1 never executed
    #####:  858:                    state->hand[currentPlayer][hand] = state->hand[currentPlayer][hand+1];
        -:  859:                }
        -:  860:
    #####:  861:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  862:                state->handCount[currentPlayer]--;
    #####:  863:                card_not_discarded = 0; // Exit the loop since estate was found
        -:  864:
        -:  865:            // No estate card found in hand, gain estate card.
    #####:  866:            } else if (hand > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  867:
        -:  868:                if(DEBUG) {
        -:  869:                    printf("No estate cards in your hand, invalid choice\n");
        -:  870:                    printf("Must gain an estate if there are any\n");
        -:  871:                }
        -:  872:
        -:  873:                // Check if their is an estate card left
    #####:  874:                if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  875:
    #####:  876:                    gainCard(estate, state, 0, currentPlayer); // Gain Estate Card
call    0 never executed
    #####:  877:                    state->supplyCount[estate]--; // Decrement Estate cards left
        -:  878:
        -:  879:                    // Check if any estate cards are left
    #####:  880:                    if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  881:
    #####:  882:                        isGameOver(state); // Check game status
call    0 never executed
        -:  883:                    }
        -:  884:                }
        -:  885:
    #####:  886:                card_not_discarded = 0; // Exit the loop, estate card gained
        -:  887:
        -:  888:            } else {
    #####:  889:                hand++; // Move to next card.
        -:  890:            }
        -:  891:        }
        -:  892:
        -:  893:    } else { // An estate card is gained since player chose not to discard one.
        -:  894:
        -:  895:        // Check if their is an estate card left
    #####:  896:        if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  897:
    #####:  898:            gainCard(estate, state, 0, currentPlayer); // Gain Estate Card
call    0 never executed
    #####:  899:            state->supplyCount[estate]--; // Decrement Estate cards left
        -:  900:
        -:  901:            // Check if any estate cards are left
    #####:  902:            if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  903:
    #####:  904:                isGameOver(state); // Check game status
call    0 never executed
        -:  905:            }
        -:  906:        }
        -:  907:    }
        -:  908:
    #####:  909:    return 0;
        -:  910:}
        -:  911:
        -:  912:/*******************************************************************************
        -:  913:**  Function: councilRoomCardEffect
        -:  914:**  Description: allows the player to draw four cards, increases their buying
        -:  915:**  power by one and adds a card to each of the other player's hand.
        -:  916:**
        -:  917:**  param: gameState *state - state of the game
        -:  918:**  param: int currentPlayer - current player for the game
        -:  919:**  param: handPos - position of the card to discard
        -:  920:**
        -:  921:**  post: state modified with an additional number of buys for the player.
        -:  922:**  post: state modified with 4 more cards drawn in their hand.
        -:  923:**  post: state modified with each other plays drawing a card.
        -:  924:**  post: state modified with discard pile being altered.
        -:  925:*******************************************************************************/
function councilRoomCardEffect called 0 returned 0% blocks executed 0%
    #####:  926:int councilRoomCardEffect(struct gameState *state, const int currentPlayer, int handPos) {
        -:  927:
        -:  928:	// Draw four cards
    #####:  929:	for (int i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  930:		drawCard(currentPlayer, state);
call    0 never executed
        -:  931:	}
        -:  932:
        -:  933:	// Increase number of buys
    #####:  934:	state->numBuys++;
        -:  935:
        -:  936:	// Each other player draws a card
    #####:  937:	for (int i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
        -:  938:
    #####:  939:		if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####:  940:			drawCard(i, state);
call    0 never executed
        -:  941:		}
        -:  942:	}
        -:  943:
        -:  944:	// Discard card from hand
    #####:  945:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  946:
    #####:  947:	return 0;
        -:  948:}
        -:  949:
        -:  950:
        -:  951:
function cardEffect called 4 returned 100% blocks executed 4%
        4:  952:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  953:{
        -:  954:  int i;
        -:  955:  int j;
        -:  956:  int k;
        -:  957:  int x;
        -:  958:  int index;
        4:  959:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  960:  int nextPlayer = currentPlayer + 1;
        -:  961:
        4:  962:  int tributeRevealedCards[2] = {-1, -1};
        -:  963:  int temphand[MAX_HAND];// moved above the if statement
        4:  964:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  965:    nextPlayer = 0;
        -:  966:  }
        -:  967:  
        -:  968:	
        -:  969:  //uses switch to select card and perform actions
        4:  970:  switch( card ) 
branch  0 taken 75%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  971:    {
        3:  972:    case adventurer:
        3:  973:      return adventurerCardEffect(state, currentPlayer);
call    0 returned 100%
        -:  974:			
    #####:  975:    case council_room:
    #####:  976:      return councilRoomCardEffect(state, currentPlayer, handPos);
call    0 never executed
        -:  977:			
    #####:  978:    case feast:
        -:  979:      //gain card with cost up to 5
        -:  980:      //Backup hand
    #####:  981:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  982:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  983:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  984:      }
        -:  985:      //Backup hand
        -:  986:
        -:  987:      //Update Coins for Buy
    #####:  988:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  989:      x = 1;//Condition to loop on
    #####:  990:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  991:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  992:	  if (DEBUG)
        -:  993:	    printf("None of that card left, sorry!\n");
        -:  994:
        -:  995:	  if (DEBUG){
        -:  996:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  997:	  }
        -:  998:	}
    #####:  999:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1000:	  printf("That card is too expensive!\n");
call    0 never executed
        -: 1001:
        -: 1002:	  if (DEBUG){
        -: 1003:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1004:	  }
        -: 1005:	}
        -: 1006:	else{
        -: 1007:
        -: 1008:	  if (DEBUG){
        -: 1009:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1010:	  }
        -: 1011:
    #####: 1012:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1013:	  x = 0;//No more buying cards
        -: 1014:
        -: 1015:	  if (DEBUG){
        -: 1016:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1017:	  }
        -: 1018:
        -: 1019:	}
        -: 1020:      }     
        -: 1021:
        -: 1022:      //Reset Hand
    #####: 1023:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1024:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1025:	temphand[i] = -1;
        -: 1026:      }
        -: 1027:      //Reset Hand
        -: 1028:      			
    #####: 1029:      return 0;
        -: 1030:			
    #####: 1031:    case gardens:
    #####: 1032:      return -1;
        -: 1033:			
    #####: 1034:    case mine:
    #####: 1035:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1036:
    #####: 1037:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1038:	{
    #####: 1039:	  return -1;
        -: 1040:	}
        -: 1041:		
    #####: 1042:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1043:	{
    #####: 1044:	  return -1;
        -: 1045:	}
        -: 1046:
    #####: 1047:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1048:	{
    #####: 1049:	  return -1;
        -: 1050:	}
        -: 1051:
    #####: 1052:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1053:
        -: 1054:      //discard card from hand
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1056:
        -: 1057:      //discard trashed card
    #####: 1058:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1063:	      break;
        -: 1064:	    }
        -: 1065:	}
        -: 1066:			
    #####: 1067:      return 0;
        -: 1068:			
    #####: 1069:    case remodel:
    #####: 1070:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1071:
    #####: 1072:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1073:	{
    #####: 1074:	  return -1;
        -: 1075:	}
        -: 1076:
    #####: 1077:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1078:
        -: 1079:      //discard card from hand
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1081:
        -: 1082:      //discard trashed card
    #####: 1083:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1086:	    {
    #####: 1087:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1088:	      break;
        -: 1089:	    }
        -: 1090:	}
        -: 1091:
    #####: 1092:      return 0;
        -: 1093:		
        1: 1094:    case smithy:
        -: 1095:
        1: 1096:      return smithyCardEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -: 1097:		
    #####: 1098:    case village:
        -: 1099:      //+1 Card
    #####: 1100:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1101:			
        -: 1102:      //+2 Actions
    #####: 1103:      state->numActions = state->numActions + 2;
        -: 1104:			
        -: 1105:      //discard played card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1107:      return 0;
        -: 1108:		
    #####: 1109:    case baron:
        -: 1110:
    #####: 1111:      return baronCardEffect(state, currentPlayer, choice1);
call    0 never executed
        -: 1112:		
    #####: 1113:    case great_hall:
        -: 1114:      //+1 Card
    #####: 1115:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1116:			
        -: 1117:      //+1 Actions
    #####: 1118:      state->numActions++;
        -: 1119:			
        -: 1120:      //discard card from hand
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1122:      return 0;
        -: 1123:		
    #####: 1124:    case minion:
        -: 1125:      //+1 action
    #####: 1126:      state->numActions++;
        -: 1127:			
        -: 1128:      //discard card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1130:			
    #####: 1131:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  state->coins = state->coins + 2;
        -: 1134:	}
        -: 1135:			
    #####: 1136:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1137:	{
        -: 1138:	  //discard hand
    #####: 1139:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1140:	    {
    #####: 1141:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1142:	    }
        -: 1143:				
        -: 1144:	  //draw 4
    #####: 1145:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1148:	    }
        -: 1149:				
        -: 1150:	  //other players discard hand and redraw if hand size > 4
    #####: 1151:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1152:	    {
    #####: 1153:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1154:		{
    #####: 1155:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1156:		    {
        -: 1157:		      //discard hand
    #####: 1158:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1159:			{
    #####: 1160:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1161:			}
        -: 1162:							
        -: 1163:		      //draw 4
    #####: 1164:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1165:			{
    #####: 1166:			  drawCard(i, state);
call    0 never executed
        -: 1167:			}
        -: 1168:		    }
        -: 1169:		}
        -: 1170:	    }
        -: 1171:				
        -: 1172:	}
    #####: 1173:      return 0;
        -: 1174:		
    #####: 1175:    case steward:
        -: 1176:
    #####: 1177:        return stewardCardEffect(state, currentPlayer, handPos, choice1, choice2, choice3);
call    0 never executed
        -: 1178:
        -: 1179:		
    #####: 1180:    case tribute:
    #####: 1181:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1182:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1183:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1184:	  state->deckCount[nextPlayer]--;
        -: 1185:	}
    #####: 1186:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1187:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1188:	  state->discardCount[nextPlayer]--;
        -: 1189:	}
        -: 1190:	else{
        -: 1191:	  //No Card to Reveal
        -: 1192:	  if (DEBUG){
        -: 1193:	    printf("No cards to reveal\n");
        -: 1194:	  }
        -: 1195:	}
        -: 1196:      }
        -: 1197:	    
        -: 1198:      else{
    #####: 1199:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1200:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1201:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1202:	    state->deckCount[nextPlayer]++;
    #####: 1203:	    state->discard[nextPlayer][i] = -1;
    #####: 1204:	    state->discardCount[nextPlayer]--;
        -: 1205:	  }
        -: 1206:			    
    #####: 1207:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1208:	} 
    #####: 1209:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1210:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1211:	state->deckCount[nextPlayer]--;
    #####: 1212:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1213:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1214:	state->deckCount[nextPlayer]--;
        -: 1215:      }    
        -: 1216:		       
    #####: 1217:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1218:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1219:	state->playedCardCount++;
    #####: 1220:	tributeRevealedCards[1] = -1;
        -: 1221:      }
        -: 1222:
    #####: 1223:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1224:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1225:	  state->coins += 2;
        -: 1226:	}
        -: 1227:		    
    #####: 1228:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1229:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1230:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1231:	}
        -: 1232:	else{//Action Card
    #####: 1233:	  state->numActions = state->numActions + 2;
        -: 1234:	}
        -: 1235:      }
        -: 1236:	    
    #####: 1237:      return 0;
        -: 1238:		
    #####: 1239:    case ambassador:
    #####: 1240:      j = 0;		//used to check if player has enough cards to discard
        -: 1241:
    #####: 1242:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1243:	{
    #####: 1244:	  return -1;				
        -: 1245:	}
        -: 1246:
    #####: 1247:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1248:	{
    #####: 1249:	  return -1;
        -: 1250:	}
        -: 1251:
    #####: 1252:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	{
    #####: 1254:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1255:	    {
    #####: 1256:	      j++;
        -: 1257:	    }
        -: 1258:	}
    #####: 1259:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1260:	{
    #####: 1261:	  return -1;				
        -: 1262:	}
        -: 1263:
        -: 1264:      if (DEBUG) 
        -: 1265:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1266:
        -: 1267:      //increase supply count for choosen card by amount being discarded
    #####: 1268:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1269:			
        -: 1270:      //each other player gains a copy of revealed card
    #####: 1271:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1272:	{
    #####: 1273:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1274:	    {
    #####: 1275:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1276:	    }
        -: 1277:	}
        -: 1278:
        -: 1279:      //discard played card from hand
    #####: 1280:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1281:
        -: 1282:      //trash copies of cards returned to supply
    #####: 1283:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1284:	{
    #####: 1285:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1286:	    {
    #####: 1287:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1288:		{
    #####: 1289:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1290:		  break;
        -: 1291:		}
        -: 1292:	    }
        -: 1293:	}			
        -: 1294:
    #####: 1295:      return 0;
        -: 1296:		
    #####: 1297:    case cutpurse:
        -: 1298:
    #####: 1299:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1300:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1301:	{
    #####: 1302:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1303:	    {
    #####: 1304:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1305:		{
    #####: 1306:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1307:		    {
    #####: 1308:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1309:		      break;
        -: 1310:		    }
    #####: 1311:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1312:		    {
    #####: 1313:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1314:			{
        -: 1315:			  if (DEBUG)
        -: 1316:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1317:			}	
    #####: 1318:		      break;
        -: 1319:		    }		
        -: 1320:		}
        -: 1321:					
        -: 1322:	    }
        -: 1323:				
        -: 1324:	}				
        -: 1325:
        -: 1326:      //discard played card from hand
    #####: 1327:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1328:
    #####: 1329:      return 0;
        -: 1330:
        -: 1331:		
    #####: 1332:    case embargo: 
        -: 1333:      //+2 Coins
    #####: 1334:      state->coins = state->coins + 2;
        -: 1335:			
        -: 1336:      //see if selected pile is in play
    #####: 1337:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1338:	{
    #####: 1339:	  return -1;
        -: 1340:	}
        -: 1341:			
        -: 1342:      //add embargo token to selected supply pile
    #####: 1343:      state->embargoTokens[choice1]++;
        -: 1344:			
        -: 1345:      //trash card
    #####: 1346:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1347:      return 0;
        -: 1348:		
    #####: 1349:    case outpost:
        -: 1350:      //set outpost flag
    #####: 1351:      state->outpostPlayed++;
        -: 1352:			
        -: 1353:      //discard card
    #####: 1354:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1355:      return 0;
        -: 1356:		
    #####: 1357:    case salvager:
        -: 1358:
    #####: 1359:      return salvagerCardEffect(state, currentPlayer, handPos, choice1);
call    0 never executed
        -: 1360:		
    #####: 1361:    case sea_hag:
    #####: 1362:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1363:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1364:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1365:        state->deckCount[i]--;
    #####: 1366:	  state->discardCount[i]++;
    #####: 1367:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1368:	}
        -: 1369:      }
    #####: 1370:      return 0;
        -: 1371:		
    #####: 1372:    case treasure_map:
        -: 1373:      //search hand for another treasure_map
    #####: 1374:      index = -1;
    #####: 1375:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1376:	{
    #####: 1377:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1378:	    {
    #####: 1379:	      index = i;
    #####: 1380:	      break;
        -: 1381:	    }
        -: 1382:	}
    #####: 1383:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1384:	{
        -: 1385:	  //trash both treasure cards
    #####: 1386:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1387:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1388:
        -: 1389:	  //gain 4 Gold cards
    #####: 1390:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1391:	    {
    #####: 1392:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1393:	    }
        -: 1394:				
        -: 1395:	  //return success
    #####: 1396:	  return 1;
        -: 1397:	}
        -: 1398:			
        -: 1399:      //no second treasure_map found in hand
    #####: 1400:      return -1;
        -: 1401:    }
        -: 1402:	
    #####: 1403:  return -1;
        -: 1404:}
        -: 1405:
function discardCard called 101 returned 100% blocks executed 89%
      101: 1406:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1407:{
        -: 1408:	
        -: 1409:  //if card is not trashed, added to Played pile 
      101: 1410:  if (trashFlag < 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1411:    {
        -: 1412:      //add card to played pile
       50: 1413:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       50: 1414:      state->playedCardCount++;
        -: 1415:    }
        -: 1416:	
        -: 1417:  //set played card to -1
      101: 1418:  state->hand[currentPlayer][handPos] = -1;
        -: 1419:	
        -: 1420:  //remove card from player's hand
      101: 1421:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1422:    {
        -: 1423:      //reduce number of cards in hand
       20: 1424:      state->handCount[currentPlayer]--;
        -: 1425:    }
       81: 1426:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1427:    {
        -: 1428:      //reduce number of cards in hand
    #####: 1429:      state->handCount[currentPlayer]--;
        -: 1430:    }
        -: 1431:  else 	
        -: 1432:    {
        -: 1433:      //replace discarded card with last card in hand
       81: 1434:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1435:      //set last card to -1
       81: 1436:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1437:      //reduce number of cards in hand
       81: 1438:      state->handCount[currentPlayer]--;
        -: 1439:    }
        -: 1440:	
      101: 1441:  return 0;
        -: 1442:}
        -: 1443:
function gainCard called 750 returned 100% blocks executed 90%
      750: 1444:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1445:{
        -: 1446:  //Note: supplyPos is enum of choosen card
        -: 1447:	
        -: 1448:  //check if supply pile is empty (0) or card is not used in game (-1)
      750: 1449:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1450:    {
    #####: 1451:      return -1;
        -: 1452:    }
        -: 1453:	
        -: 1454:  //added card for [whoseTurn] current player:
        -: 1455:  // toFlag = 0 : add to discard
        -: 1456:  // toFlag = 1 : add to deck
        -: 1457:  // toFlag = 2 : add to hand
        -: 1458:
      750: 1459:  if (toFlag == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1460:    {
      250: 1461:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      250: 1462:      state->deckCount[player]++;
        -: 1463:    }
      500: 1464:  else if (toFlag == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1465:    {
      250: 1466:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      250: 1467:      state->handCount[player]++;
        -: 1468:    }
        -: 1469:  else
        -: 1470:    {
      250: 1471:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      250: 1472:      state->discardCount[player]++;
        -: 1473:    }
        -: 1474:	
        -: 1475:  //decrease number in supply pile
      750: 1476:  state->supplyCount[supplyPos]--;
        -: 1477:	 
      750: 1478:  return 0;
        -: 1479:}
        -: 1480:
function updateCoins called 1134 returned 100% blocks executed 100%
     1134: 1481:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1482:{
        -: 1483:  int i;
        -: 1484:	
        -: 1485:  //reset coin count
     1134: 1486:  state->coins = 0;
        -: 1487:
        -: 1488:  //add coins for each Treasure card in player's hand
     5814: 1489:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1490:    {
     4680: 1491:      if (state->hand[player][i] == copper)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1492:	{
     3282: 1493:	  state->coins += 1;
        -: 1494:	}
     1398: 1495:      else if (state->hand[player][i] == silver)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
        -: 1496:	{
      330: 1497:	  state->coins += 2;
        -: 1498:	}
     1068: 1499:      else if (state->hand[player][i] == gold)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -: 1500:	{
      330: 1501:	  state->coins += 3;
        -: 1502:	}	
        -: 1503:    }	
        -: 1504:
        -: 1505:  //add bonus
     1134: 1506:  state->coins += bonus;
        -: 1507:
     1134: 1508:  return 0;
        -: 1509:}
        -: 1510:
        -: 1511:
        -: 1512://end of dominion.c
        -: 1513:
