        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 20976 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
    20976:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
    20976:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
     7470:   12:    return -1;
    13506:   13:  return 0;
    20976:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 747 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      747:   44:  SelectStream(1);
      747:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     1494:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      747:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    16434:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
   164340:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
   141930:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    74700:   65:        }
     7470:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      747:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
      747:   75:      state->supplyCount[curse] = 10;
      747:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      747:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
      747:   89:      state->supplyCount[estate] = 8;
      747:   90:      state->supplyCount[duchy] = 8;
      747:   91:      state->supplyCount[province] = 8;
      747:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      747:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      747:  102:  state->supplyCount[silver] = 40;
      747:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    31374:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
   246510:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
   115785:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    14193:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:		{
     1494:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
     1494:  116:		    state->supplyCount[i] = 8; 
     1494:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
     1494:  119:		}
        -:  120:	      else
        -:  121:		{
     5976:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     7470:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   108315:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   108315:  130:	}
        -:  131:
    14940:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4482:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
     1494:  140:      state->deckCount[i] = 0;
    11952:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:    	{
     4482:  143:    	  state->deck[i][j] = estate;
     4482:  144:    	  state->deckCount[i]++;
     4482:  145:    	}
    23904:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:    	{
    10458:  148:    	  state->deck[i][j] = copper;
    10458:  149:    	  state->deckCount[i]++;		
    10458:  150:    	}
     1494:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4482:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
     1494:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     1494:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4482:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1494:  166:      state->handCount[i] = 0;
     1494:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     1494:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    41832:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
    20169:  178:      state->embargoTokens[i] = 0;
    20169:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      747:  182:  state->outpostPlayed = 0;
      747:  183:  state->phase = 0;
      747:  184:  state->numActions = 1;
      747:  185:  state->numBuys = 1;
      747:  186:  state->playedCardCount = 0;
      747:  187:  state->whoseTurn = 0;
      747:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     8964:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
     3735:  193:    drawCard(state->whoseTurn, state);
     3735:  194:  }
        -:  195:
      747:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      747:  198:  return 0;
      747:  199:}
        -:  200:
function shuffle called 1548 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1548:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1548:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1%
branch  1 taken 99%
       14:  210:    return -1;
     1534:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    33148:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
    15040:  215:    card = floor(Random() * state->deckCount[player]);
    15040:  216:    newDeck[newDeckPos] = state->deck[player][card];
    15040:  217:    newDeckPos++;
   104980:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
    37450:  219:      state->deck[player][i] = state->deck[player][i+1];
    37450:  220:    }
    15040:  221:    state->deckCount[player]--;
        -:  222:  }
    33148:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
    15040:  224:    state->deck[player][i] = newDeck[i];
    15040:  225:    state->deckCount[player]++;
    15040:  226:  }
        -:  227:
     1534:  228:  return 0;
     1548:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 752 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
      752:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 41 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       41:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 4001 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     4001:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      304:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 66%
branch  1 taken 34%
      100:  534:      state->deck[player][i] = state->discard[player][i];
      100:  535:      state->discard[player][i] = -1;
      100:  536:    }
        -:  537:
       52:  538:    state->deckCount[player] = state->discardCount[player];
       52:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       52:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       52:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       52:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       52:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       52:  559:    if (deckCounter == 0)
branch  0 taken 23%
branch  1 taken 77%
       12:  560:      return -1;
        -:  561:
       40:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       40:  563:    state->deckCount[player]--;
       40:  564:    state->handCount[player]++;//Increment hand count
       40:  565:  }
        -:  566:
        -:  567:  else{
     3949:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     3949:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     3949:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     3949:  576:    state->deckCount[player]--;
     3949:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     3989:  580:  return 0;
     4001:  581:}
        -:  582:
function getCost called 6 returned 100% blocks executed 19%
        -:  583:int getCost(int cardNumber)
        -:  584:{
        6:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 50%
branch  5 taken 17%
branch  6 taken 33%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        3:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        2:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        6:  644:}
        -:  645:
function adventurerEffect called 4 returned 100% blocks executed 80%
        -:  646:int adventurerEffect(struct gameState *state)
        -:  647:{
        4:  648:  int currentPlayer = whoseTurn(state);
        -:  649:  int temphand[MAX_HAND];
        4:  650:  int z = 1;// this is the counter for the temp hand
        4:  651:  int drawntreasure=0;
        -:  652:  int cardDrawn;
        -:  653:
       24:  654:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33%
        8:  655:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 25%
branch  1 taken 75%
        2:  656:      shuffle(currentPlayer, state);
        2:  657:    }
        8:  658:    drawCard(currentPlayer, state);
        8:  659:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        8:  660:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        8:  661:      drawntreasure++;
        -:  662:    else {
    #####:  663:      temphand[z]=cardDrawn;
    #####:  664:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  665:      z++;
        -:  666:    }
        -:  667:  }
       16:  668:  while(z-1>=0){
branch  0 taken 50%
branch  1 taken 50%
        4:  669:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        4:  670:    z=z-1;
        -:  671:  }
        4:  672:  return 0;
        -:  673:}
        -:  674:
function smithyEffect called 2 returned 100% blocks executed 100%
        -:  675:int smithyEffect(struct gameState *state, int handPos)
        -:  676:{
        -:  677:  int i;
        2:  678:  int currentPlayer = whoseTurn(state);
        -:  679:
        -:  680:  //+3 Cards
       20:  681:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  682:    {
        8:  683:      drawCard(currentPlayer, state);
        8:  684:    }
        -:  685:      
        -:  686:  //discard card from hand
        2:  687:  discardCard(handPos, currentPlayer, state, 0);
        2:  688:  return 0;
        -:  689:}
        -:  690:
function sea_hagEffect called 2 returned 100% blocks executed 100%
        -:  691:int sea_hagEffect(struct gameState *state)
        -:  692:{
        -:  693:  int i;
        2:  694:  int currentPlayer = whoseTurn(state);
        -:  695:
       12:  696:  for (i = 0; i < state->numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33%
        4:  697:    if (i != currentPlayer){
branch  0 taken 50%
branch  1 taken 50%
        2:  698:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          
        2:  699:      state->deckCount[i]--;
        2:  700:      state->discardCount[i]++;
        2:  701:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        2:  702:    }
        4:  703:  }
        2:  704:  return 0;
        -:  705:}
        -:  706:
function mineEffect called 7 returned 100% blocks executed 100%
        -:  707:int mineEffect(struct gameState *state, int choice1, int choice2, int handPos)
        -:  708:{
        7:  709:  int currentPlayer = whoseTurn(state);
        -:  710:  int i;
        7:  711:  int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  712:
       13:  713:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > silver)
branch  0 taken 86%
branch  1 taken 14%
branch  2 taken 17%
branch  3 taken 83%
        -:  714:  {
        2:  715:    return -1;
        -:  716:  }
        -:  717:    
        9:  718:  if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 80%
branch  1 taken 20%
branch  2 taken 25%
branch  3 taken 75%
        -:  719:  {
        2:  720:    return -1;
        -:  721:  }
        -:  722:
        3:  723:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 taken 33%
branch  1 taken 67%
        -:  724:  {
        1:  725:    return -1;
        -:  726:  }
        -:  727:
        2:  728:  gainCard(choice2, state, 2, currentPlayer);
        -:  729:
        -:  730:  //discard card from hand
        2:  731:  discardCard(handPos, currentPlayer, state, 0);
        -:  732:
        -:  733:  //discard trashed card
        8:  734:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0%
        -:  735:  {
        4:  736:    if (state->hand[currentPlayer][i] == j)
branch  0 taken 50%
branch  1 taken 50%
        -:  737:      {
        2:  738:        discardCard(i, currentPlayer, state, 0);      
        2:  739:        break;
        -:  740:      }
        2:  741:  }
        -:  742:      
        2:  743:  return 0;
        7:  744:}
        -:  745:
function tributeEffect called 0 returned 0% blocks executed 0%
        -:  746:int tributeEffect(struct gameState *state)
        -:  747:{
    #####:  748:  int currentPlayer = whoseTurn(state);
    #####:  749:  int tributeRevealedCards[2] = {-1, -1};
    #####:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:  int i;
        -:  752:
    #####:  753:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  754:    nextPlayer = 0;
    #####:  755:  }
        -:  756:
    #####:  757:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  758:    if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  759:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  760:      state->deckCount[nextPlayer]--;
    #####:  761:    }
    #####:  762:    else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  763:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  764:      state->discardCount[nextPlayer]--;
    #####:  765:    }
        -:  766:    else{
        -:  767:      //No Card to Reveal
        -:  768:      if (DEBUG){
        -:  769:        printf("No cards to reveal\n");
        -:  770:      }
        -:  771:    }
    #####:  772:  }
        -:  773:      
        -:  774:  else{
    #####:  775:    if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  776:      for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  777:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  778:        state->deckCount[nextPlayer]++;
    #####:  779:        state->discard[nextPlayer][i] = -1;
    #####:  780:        state->discardCount[nextPlayer]--;
    #####:  781:      }
        -:  782:            
    #####:  783:      shuffle(nextPlayer,state);//Shuffle the deck
    #####:  784:    } 
    #####:  785:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  786:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  787:    state->deckCount[nextPlayer]--;
    #####:  788:    tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  789:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  790:    state->deckCount[nextPlayer]--;
        -:  791:        }    
        -:  792:             
    #####:  793:        if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  794:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  795:    state->playedCardCount++;
    #####:  796:    tributeRevealedCards[1] = -1;
    #####:  797:        }
        -:  798:
    #####:  799:        for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  800:    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  801:      state->coins += 3;
    #####:  802:    }
        -:  803:          
    #####:  804:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  805:      drawCard(currentPlayer, state);
    #####:  806:      drawCard(currentPlayer, state);
    #####:  807:    }
        -:  808:    else{//Action Card
    #####:  809:      state->numActions = state->numActions + 2;
        -:  810:    }
    #####:  811:  }
        -:  812:  
    #####:  813:  return 0;
        -:  814:}
        -:  815:
function cardEffect called 11 returned 100% blocks executed 3%
        -:  816:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  817:{
        -:  818:  int i;
        -:  819:  int j;
        -:  820:  int k;
        -:  821:  int x;
        -:  822:  int index;
       11:  823:  int currentPlayer = whoseTurn(state);
        -:  824:
        -:  825:  int temphand[MAX_HAND];
        -:  826:	
        -:  827:  //uses switch to select card and perform actions
       11:  828:  switch( card ) 
branch  0 taken 27%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 55%
branch  5 taken 0%
branch  6 taken 9%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 9%
branch 19 taken 0%
branch 20 taken 0%
        -:  829:    {
        -:  830:    case adventurer:
        3:  831:      return adventurerEffect(state);
        -:  832:			
        -:  833:    case council_room:
        -:  834:      //+4 Cards
    #####:  835:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  836:	{
    #####:  837:	  drawCard(currentPlayer, state);
    #####:  838:	}
        -:  839:			
        -:  840:      //+1 Buy
    #####:  841:      state->numBuys++;
        -:  842:			
        -:  843:      //Each other player draws a card
    #####:  844:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  845:	{
    #####:  846:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  847:	    {
    #####:  848:	      drawCard(i, state);
    #####:  849:	    }
    #####:  850:	}
        -:  851:			
        -:  852:      //put played card in played card pile
    #####:  853:      discardCard(handPos, currentPlayer, state, 0);
        -:  854:			
    #####:  855:      return 0;
        -:  856:			
        -:  857:    case feast:
        -:  858:      //gain card with cost up to 5
        -:  859:      //Backup hand
    #####:  860:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  861:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  862:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  863:      }
        -:  864:      //Backup hand
        -:  865:
        -:  866:      //Update Coins for Buy
    #####:  867:      updateCoins(currentPlayer, state, 5);
    #####:  868:      x = 1;//Condition to loop on
    #####:  869:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  870:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  871:	  if (DEBUG)
        -:  872:	    printf("None of that card left, sorry!\n");
        -:  873:
        -:  874:	  if (DEBUG){
        -:  875:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  876:	  }
    #####:  877:	}
    #####:  878:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  879:	  printf("That card is too expensive!\n");
        -:  880:
        -:  881:	  if (DEBUG){
        -:  882:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  883:	  }
    #####:  884:	}
        -:  885:	else{
        -:  886:
        -:  887:	  if (DEBUG){
        -:  888:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  889:	  }
        -:  890:
    #####:  891:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  892:	  x = 0;//No more buying cards
        -:  893:
        -:  894:	  if (DEBUG){
        -:  895:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  896:	  }
        -:  897:
        -:  898:	}
        -:  899:      }     
        -:  900:
        -:  901:      //Reset Hand
    #####:  902:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  903:	state->hand[currentPlayer][i] = temphand[i];
    #####:  904:	temphand[i] = -1;
    #####:  905:      }
        -:  906:      //Reset Hand
        -:  907:      			
    #####:  908:      return 0;
        -:  909:			
        -:  910:    case gardens:
    #####:  911:      return -1;
        -:  912:			
        -:  913:    case mine:
        6:  914:      return mineEffect(state, choice1, choice2, handPos);
        -:  915:			
        -:  916:    case remodel:
    #####:  917:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  918:
    #####:  919:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  920:	{
    #####:  921:	  return -1;
        -:  922:	}
        -:  923:
    #####:  924:      gainCard(choice2, state, 0, currentPlayer);
        -:  925:
        -:  926:      //discard card from hand
    #####:  927:      discardCard(handPos, currentPlayer, state, 0);
        -:  928:
        -:  929:      //discard trashed card
    #####:  930:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  931:	{
    #####:  932:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  933:	    {
    #####:  934:	      discardCard(i, currentPlayer, state, 0);			
    #####:  935:	      break;
        -:  936:	    }
    #####:  937:	}
        -:  938:
        -:  939:
    #####:  940:      return 0;
        -:  941:		
        -:  942:    case smithy:
        1:  943:      return smithyEffect(state, handPos);
        -:  944:		
        -:  945:    case village:
        -:  946:      //+1 Card
    #####:  947:      drawCard(currentPlayer, state);
        -:  948:			
        -:  949:      //+2 Actions
    #####:  950:      state->numActions = state->numActions + 2;
        -:  951:			
        -:  952:      //discard played card from hand
    #####:  953:      discardCard(handPos, currentPlayer, state, 0);
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case baron:
    #####:  957:      state->numBuys++;//Increase buys by 1!
    #####:  958:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  959:	int p = 0;//Iterator for hand!
    #####:  960:	int card_not_discarded = 1;//Flag for discard set!
    #####:  961:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  962:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  963:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  964:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  965:	    state->discardCount[currentPlayer]++;
    #####:  966:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  967:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  968:	    }
    #####:  969:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  970:	    state->handCount[currentPlayer]--;
    #####:  971:	    card_not_discarded = 0;//Exit the loop
    #####:  972:	  }
    #####:  973:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  974:	    if(DEBUG) {
        -:  975:	      printf("No estate cards in your hand, invalid choice\n");
        -:  976:	      printf("Must gain an estate if there are any\n");
        -:  977:	    }
    #####:  978:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  979:	      gainCard(estate, state, 0, currentPlayer);
    #####:  980:	      state->supplyCount[estate]--;//Decrement estates
    #####:  981:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  982:		isGameOver(state);
    #####:  983:	      }
    #####:  984:	    }
    #####:  985:	    card_not_discarded = 0;//Exit the loop
    #####:  986:	  }
        -:  987:			    
        -:  988:	  else{
    #####:  989:	    p++;//Next card
        -:  990:	  }
        -:  991:	}
    #####:  992:      }
        -:  993:			    
        -:  994:      else{
    #####:  995:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  996:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  997:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  998:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  999:	    isGameOver(state);
    #####: 1000:	  }
    #####: 1001:	}
        -: 1002:      }
        -: 1003:	    
        -: 1004:      
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case great_hall:
        -: 1008:      //+1 Card
    #####: 1009:      drawCard(currentPlayer, state);
        -: 1010:			
        -: 1011:      //+1 Actions
    #####: 1012:      state->numActions++;
        -: 1013:			
        -: 1014:      //discard card from hand
    #####: 1015:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case minion:
        -: 1019:      //+1 action
    #####: 1020:      state->numActions++;
        -: 1021:			
        -: 1022:      //discard card from hand
    #####: 1023:      discardCard(handPos, currentPlayer, state, 0);
        -: 1024:			
    #####: 1025:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1026:	{
    #####: 1027:	  state->coins = state->coins + 2;
    #####: 1028:	}
        -: 1029:			
    #####: 1030:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1031:	{
        -: 1032:	  //discard hand
    #####: 1033:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -: 1034:	    {
    #####: 1035:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1036:	    }
        -: 1037:				
        -: 1038:	  //draw 4
    #####: 1039:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1040:	    {
    #####: 1041:	      drawCard(currentPlayer, state);
    #####: 1042:	    }
        -: 1043:				
        -: 1044:	  //other players discard hand and redraw if hand size > 4
    #####: 1045:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1046:	    {
    #####: 1047:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1048:		{
    #####: 1049:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1050:		    {
        -: 1051:		      //discard hand
    #####: 1052:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1053:			{
    #####: 1054:			  discardCard(handPos, i, state, 0);
        -: 1055:			}
        -: 1056:							
        -: 1057:		      //draw 4
    #####: 1058:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1059:			{
    #####: 1060:			  drawCard(i, state);
    #####: 1061:			}
    #####: 1062:		    }
    #####: 1063:		}
    #####: 1064:	    }
        -: 1065:				
    #####: 1066:	}
    #####: 1067:      return 0;
        -: 1068:		
        -: 1069:    case steward:
    #####: 1070:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1071:	{
        -: 1072:	  //+2 cards
    #####: 1073:	  drawCard(currentPlayer, state);
    #####: 1074:	  drawCard(currentPlayer, state);
    #####: 1075:	}
    #####: 1076:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
        -: 1078:	  //+2 coins
    #####: 1079:	  state->coins = state->coins + 2;
    #####: 1080:	}
        -: 1081:      else
        -: 1082:	{
        -: 1083:	  //trash 2 cards in hand
    #####: 1084:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1085:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1086:	}
        -: 1087:			
        -: 1088:      //discard card from hand
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1090:      return 0;
        -: 1091:		
        -: 1092:    case tribute:
    #####: 1093:      return tributeEffect(state);
        -: 1094:		
        -: 1095:    case ambassador:
    #####: 1096:      j = 0;		//used to check if player has enough cards to discard
        -: 1097:
    #####: 1098:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
    #####: 1103:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1104:	{
    #####: 1105:	  return -1;
        -: 1106:	}
        -: 1107:
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1111:	    {
    #####: 1112:	      j++;
    #####: 1113:	    }
    #####: 1114:	}
    #####: 1115:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1116:	{
    #####: 1117:	  return -1;				
        -: 1118:	}
        -: 1119:
        -: 1120:      if (DEBUG) 
        -: 1121:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1122:
        -: 1123:      //increase supply count for choosen card by amount being discarded
    #####: 1124:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1125:			
        -: 1126:      //each other player gains a copy of revealed card
    #####: 1127:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1128:	{
    #####: 1129:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1130:	    {
    #####: 1131:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1132:	    }
    #####: 1133:	}
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1137:
        -: 1138:      //trash copies of cards returned to supply
    #####: 1139:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  discardCard(i, currentPlayer, state, 1);
    #####: 1146:		  break;
        -: 1147:		}
    #####: 1148:	    }
    #####: 1149:	}			
        -: 1150:
    #####: 1151:      return 0;
        -: 1152:		
        -: 1153:    case cutpurse:
        -: 1154:
    #####: 1155:      updateCoins(currentPlayer, state, 2);
    #####: 1156:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1157:	{
    #####: 1158:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1159:	    {
    #####: 1160:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1161:		{
    #####: 1162:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1163:		    {
    #####: 1164:		      discardCard(j, i, state, 0);
    #####: 1165:		      break;
        -: 1166:		    }
    #####: 1167:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1168:		    {
    #####: 1169:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1170:			{
        -: 1171:			  if (DEBUG)
        -: 1172:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1173:			}	
    #####: 1174:		      break;
        -: 1175:		    }		
    #####: 1176:		}
        -: 1177:					
    #####: 1178:	    }
        -: 1179:				
    #####: 1180:	}				
        -: 1181:
        -: 1182:      //discard played card from hand
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1184:
    #####: 1185:      return 0;
        -: 1186:
        -: 1187:		
        -: 1188:    case embargo: 
        -: 1189:      //+2 Coins
    #####: 1190:      state->coins = state->coins + 2;
        -: 1191:			
        -: 1192:      //see if selected pile is in play
    #####: 1193:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1194:	{
    #####: 1195:	  return -1;
        -: 1196:	}
        -: 1197:			
        -: 1198:      //add embargo token to selected supply pile
    #####: 1199:      state->embargoTokens[choice1]++;
        -: 1200:			
        -: 1201:      //trash card
    #####: 1202:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1203:      return 0;
        -: 1204:		
        -: 1205:    case outpost:
        -: 1206:      //set outpost flag
    #####: 1207:      state->outpostPlayed++;
        -: 1208:			
        -: 1209:      //discard card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case salvager:
        -: 1214:      //+1 buy
    #####: 1215:      state->numBuys++;
        -: 1216:			
    #####: 1217:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1218:	{
        -: 1219:	  //gain coins equal to trashed card
    #####: 1220:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1221:	  //trash card
    #####: 1222:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1223:	}
        -: 1224:			
        -: 1225:      //discard card
    #####: 1226:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1227:      return 0;
        -: 1228:		
        -: 1229:    case sea_hag:
        1: 1230:      return sea_hagEffect(state);
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
        -: 1241:	    }
    #####: 1242:	}
    #####: 1243:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
        -: 1261:    }
        -: 1262:	
    #####: 1263:  return -1;
       11: 1264:}
        -: 1265:
function discardCard called 106 returned 100% blocks executed 90%
        -: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
      106: 1270:  if (trashFlag < 1)
branch  0 taken 53%
branch  1 taken 47%
        -: 1271:    {
        -: 1272:      //add card to played pile
       56: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       56: 1274:      state->playedCardCount++;
       56: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
      106: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
      106: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 19%
branch  1 taken 81%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
       20: 1284:      state->handCount[currentPlayer]--;
       20: 1285:    }
       86: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
    #####: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
       86: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
       86: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
       86: 1298:      state->handCount[currentPlayer]--;
        -: 1299:    }
        -: 1300:	
      106: 1301:  return 0;
        -: 1302:}
        -: 1303:
function gainCard called 752 returned 100% blocks executed 90%
        -: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
      752: 1309:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1310:    {
    #####: 1311:      return -1;
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
      752: 1319:  if (toFlag == 1)
branch  0 taken 33%
branch  1 taken 67%
        -: 1320:    {
      250: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      250: 1322:      state->deckCount[player]++;
      250: 1323:    }
      502: 1324:  else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1325:    {
      252: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      252: 1327:      state->handCount[player]++;
      252: 1328:    }
        -: 1329:  else
        -: 1330:    {
      250: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      250: 1332:      state->discardCount[player]++;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
      752: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
      752: 1338:  return 0;
      752: 1339:}
        -: 1340:
function updateCoins called 1143 returned 100% blocks executed 100%
        -: 1341:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
     1143: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
    11736: 1349:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 81%
branch  1 taken 19%
        -: 1350:    {
     4725: 1351:      if (state->hand[player][i] == copper)
branch  0 taken 70%
branch  1 taken 30%
        -: 1352:	{
     3318: 1353:	  state->coins += 1;
     3318: 1354:	}
     1407: 1355:      else if (state->hand[player][i] == silver)
branch  0 taken 23%
branch  1 taken 77%
        -: 1356:	{
      330: 1357:	  state->coins += 2;
      330: 1358:	}
     1077: 1359:      else if (state->hand[player][i] == gold)
branch  0 taken 31%
branch  1 taken 69%
        -: 1360:	{
      330: 1361:	  state->coins += 3;
      330: 1362:	}	
     4725: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
     1143: 1366:  state->coins += bonus;
        -: 1367:
     1143: 1368:  return 0;
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372://end of dominion.c
        -: 1373:
